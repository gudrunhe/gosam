# vim: ts=3:sw=3:expandtab
# Input for python parser. It is here because Python needs it
# and you specified extensions=formopt

# we need types of parameters
# a list of all functions
# a list of all dotproducts
# a list of mathematical operators and their translations


parameters={
	'gauge1z'     : 'complex',
	'gauge2z'     : 'complex',
	'mdlaEWM1'    : 'real',
	'mdlaS'       : 'real',
	'mdlcb'       : 'real',
	'mdlcgaga'    : 'real',
	'mdlcgg'      : 'real',
	'mdlcgghh'    : 'real',
	'mdlchhh'     : 'real',
	'mdlchhhh'    : 'real',
	'mdlct'       : 'real',
	'mdlctau'     : 'real',
	'mdlcthh'     : 'real',
	'mdlcV'       : 'real',
	'mdlcVhh'     : 'real',
	'mdlcZga'     : 'real',
	'mdlEFTcount' : 'real',
	'mdlfloat1'   : 'real',
	'mdlfloat2'   : 'real',
	'mdlfloat3'   : 'real',
	'mdlfloat4'   : 'real',
	'mdlfloat5'   : 'real',
	'mdlfloat6'   : 'real',
	'mdlfloat7'   : 'real',
	'mdlGf'       : 'real',
	'mdlLambdam2' : 'real',
	'mdlMB'       : 'real',
	'mdlMC'       : 'real',
	'mdlMD'       : 'real',
	'mdlMe'       : 'real',
	'mdlMMU'      : 'real',
	'mdlMS'       : 'real',
	'mdlMT'       : 'real',
	'mdlMTA'      : 'real',
	'mdlMU'       : 'real',
	'mdlMZ'       : 'real',
	'mdlWh'       : 'real',
	'mdlWT'       : 'real',
	'mdlWW'       : 'real',
	'mdlWZ'       : 'real',
	'mdlymb'      : 'real',
	'mdlymc'      : 'real',
	'mdlymdo'     : 'real',
	'mdlyme'      : 'real',
	'mdlymm'      : 'real',
	'mdlyms'      : 'real',
	'mdlymt'      : 'real',
	'mdlymtau'    : 'real',
	'mdlymup'     : 'real',
	'NC'          : 'real',
	'Nf'          : 'real',
	'Nfgen'       : 'real',

	'mdlZERO' : 'real',
	'mdlaEW' : 'real',
	'mdlG' : 'real',
	'mdlCKM1x1' : 'complex',
	'mdlCKM1x2' : 'complex',
	'mdlCKM1x3' : 'complex',
	'mdlCKM2x1' : 'complex',
	'mdlCKM2x2' : 'complex',
	'mdlCKM2x3' : 'complex',
	'mdlCKM3x1' : 'complex',
	'mdlCKM3x2' : 'complex',
	'mdlCKM3x3' : 'complex',
	'mdlloop' : 'real',
	'mdlMh' : 'real',
	'mdlMW' : 'real',
	'mdlee' : 'real',
	'mdlsw2' : 'real',
	'mdlcw' : 'real',
	'mdlsw' : 'real',
	'mdlg1' : 'real',
	'mdlgw' : 'real',
	'mdlvev' : 'real',
	'mdlv' : 'real',
	'mdlyb' : 'real',
	'mdlyc' : 'real',
	'mdlydo' : 'real',
	'mdlye' : 'real',
	'mdlym' : 'real',
	'mdlys' : 'real',
	'mdlyt' : 'real',
	'mdlytau' : 'real',
	'mdlyup' : 'real',
	'mdlnormh3' : 'real',
	'mdlnormh4' : 'real',
	'mdlyyb' : 'real',
	'mdlyyt' : 'real',
	'mdlyytau' : 'real',
	'Nfrat' : 'real',
	'mdlGC1' : 'complex',
	'mdlGC2' : 'complex',
	'mdlGC3' : 'complex',
	'mdlGC4' : 'complex',
	'mdlGC5' : 'complex',
	'mdlGC6' : 'complex',
	'mdlGC7' : 'complex',
	'mdlGC8' : 'complex',
	'mdlGC9' : 'complex',
	'mdlGC9SM' : 'complex',
	'mdlGC9DIM6' : 'complex',
	'mdlGC10' : 'complex',
	'mdlGC11' : 'complex',
	'mdlGC12' : 'complex',
	'mdlGC13' : 'complex',
	'mdlGC14' : 'complex',
	'mdlGC15' : 'complex',
	'mdlGC16' : 'complex',
	'mdlGC17' : 'complex',
	'mdlGC18' : 'complex',
	'mdlGC19' : 'complex',
	'mdlGC20' : 'complex',
	'mdlGC21' : 'complex',
	'mdlGC22' : 'complex',
	'mdlGC23' : 'complex',
	'mdlGC24' : 'complex',
	'mdlGC25' : 'complex',
	'mdlGC26' : 'complex',
	'mdlGC27' : 'complex',
	'mdlGC28' : 'complex',
	'mdlGC29' : 'complex',
	'mdlGC30' : 'complex',
	'mdlGC31' : 'complex',
	'mdlGC31DIM6' : 'complex',
	'mdlGC32' : 'complex',
	'mdlGC32DIM6' : 'complex',
	'mdlGC33' : 'complex',
	'mdlGC33DIM6' : 'complex',
	'mdlGC34' : 'complex',
	'mdlGC34DIM6' : 'complex',
	'mdlGC35' : 'complex',
	'mdlGC35DIM6' : 'complex',
	'mdlGC36' : 'complex',
	'mdlGC36DIM6' : 'complex',
	'mdlGC37' : 'complex',
	'mdlGC38' : 'complex',
	'mdlGC39' : 'complex',
	'mdlGC39SM' : 'complex',
	'mdlGC39DIM6' : 'complex',
	'mdlGC40' : 'complex',
	'mdlGC40DIM6' : 'complex',
	'mdlGC41' : 'complex',
	'mdlGC41SM' : 'complex',
	'mdlGC41DIM6' : 'complex',
	'mdlGC42' : 'complex',
	'mdlGC43' : 'complex',
	'mdlGC44' : 'complex',
	'mdlGC45' : 'complex',
	'mdlGC46' : 'complex',
	'mdlGC47' : 'complex',
	'mdlGC48' : 'complex',
	'mdlGC49' : 'complex',
	'mdlGC50' : 'complex',

   'TR' : 'real',
   'pi' : 'real',
   'i_' : 'complex',
   'abb' : 'array',
   'acc' : 'array',
   'acd' : 'array',
   'abbWrap' : 'array',
   'mabb' : 'array'
   }


kinematics={

	'es12' : 'real',
	'es4' : 'real',
	'es23' : 'real',
	'es3' : 'real',
	'spak1k2' : 'complex', 'spbk2k1' : 'complex',
	'spak1l3' : 'complex', 'spbl3k1' : 'complex',
	'spak1l4' : 'complex', 'spbl4k1' : 'complex',
	'spak2l3' : 'complex', 'spbl3k2' : 'complex',
	'spak2l4' : 'complex', 'spbl4k2' : 'complex',
	'spal3l4' : 'complex', 'spbl4l3' : 'complex',
	'k1' : 'vector',
	'gauge1z' : 'complex',
	'k2' : 'vector',
	'gauge2z' : 'complex',
	'k3' : 'vector', 'l3' : 'vector',
	'k4' : 'vector', 'l4' : 'vector',
	'e1' : 'cvector',
	'e2' : 'cvector',
	'spak1e1' : 'complex', 'spbe1k1' : 'complex',
	'spae1k1' : 'complex', 'spbk1e1' : 'complex',
	'spak1e2' : 'complex', 'spbe2k1' : 'complex',
	'spae1k2' : 'complex', 'spbk2e1' : 'complex',
	'spae1l3' : 'complex', 'spbl3e1' : 'complex',
	'spae1l4' : 'complex', 'spbl4e1' : 'complex',
	'spak2e2' : 'complex', 'spbe2k2' : 'complex',
	'spae2k2' : 'complex', 'spbk2e2' : 'complex',
	'spae2l3' : 'complex', 'spbl3e2' : 'complex',
	'spae2l4' : 'complex', 'spbl4e2' : 'complex',
	'spae1e2' : 'complex', 'spbe2e1' : 'complex',
	'spvak1e1' : 'cvector', 'spvae1k1' : 'cvector',
	'spvak1e2' : 'cvector', 'spvae2k1' : 'cvector',
	'spvak2e1' : 'cvector', 'spvae1k2' : 'cvector',
	'spvak2e2' : 'cvector', 'spvae2k2' : 'cvector',
	'spval3e1' : 'cvector', 'spvae1l3' : 'cvector',
	'spval3e2' : 'cvector', 'spvae2l3' : 'cvector',
	'spval4e1' : 'cvector', 'spvae1l4' : 'cvector',
	'spval4e2' : 'cvector', 'spvae2l4' : 'cvector',
	'spvae1e2' : 'cvector', 'spvae2e1' : 'cvector',
	'c1' : 'color'
}

dotproducts={
		'QspQ' : 'dotproduct(Q,Q)','Qspk1' : 'dotproduct(Q,k1)','Qspk2' : 'dotproduct(Q,k2)','Qspk3' : 'dotproduct(Q,k3)', 'Qspl3' : 'dotproduct(Q,l3)','Qspk4' : 'dotproduct(Q,k4)', 'Qspl4' : 'dotproduct(Q,l4)','Qspe1' : 'dotproduct(Q,e1)','Qspe2' : 'dotproduct(Q,e2)','Qspvak1k2' : 'dotproduct(Q,spvak1k2)','Qspvak1l3' : 'dotproduct(Q,spvak1l3)','Qspvak1l4' : 'dotproduct(Q,spvak1l4)','Qspvak2k1' : 'dotproduct(Q,spvak2k1)','Qspvak2l3' : 'dotproduct(Q,spvak2l3)','Qspvak2l4' : 'dotproduct(Q,spvak2l4)','Qspval3k1' : 'dotproduct(Q,spval3k1)','Qspval3k2' : 'dotproduct(Q,spval3k2)','Qspval3l4' : 'dotproduct(Q,spval3l4)','Qspval4k1' : 'dotproduct(Q,spval4k1)','Qspval4k2' : 'dotproduct(Q,spval4k2)','Qspval4l3' : 'dotproduct(Q,spval4l3)','Qspvak1e1' : 'dotproduct(Q,spvak1e1)' ,'Qspvae1k1': 'dotproduct(Q,spvae1k1)','Qspvak1e2' : 'dotproduct(Q,spvak1e2)' ,'Qspvae2k1': 'dotproduct(Q,spvae2k1)','Qspvak2e1' : 'dotproduct(Q,spvak2e1)' ,'Qspvae1k2': 'dotproduct(Q,spvae1k2)','Qspvak2e2' : 'dotproduct(Q,spvak2e2)' ,'Qspvae2k2': 'dotproduct(Q,spvae2k2)','Qspval3e1' : 'dotproduct(Q,spval3e1)' ,'Qspvae1l3': 'dotproduct(Q,spvae1l3)','Qspval3e2' : 'dotproduct(Q,spval3e2)' ,'Qspvae2l3': 'dotproduct(Q,spvae2l3)','Qspval4e1' : 'dotproduct(Q,spval4e1)' ,'Qspvae1l4': 'dotproduct(Q,spvae1l4)','Qspval4e2' : 'dotproduct(Q,spval4e2)' ,'Qspvae2l4': 'dotproduct(Q,spvae2l4)','Qspvae1e2' : 'dotproduct(Q,spvae1e2)',
  'Qspvae2e1' : 'dotproduct(Q,spvae2e1)'}




symbols = {
            'sqrt2' : 'sqrt2',
            'Sqrt2' : 'sqrt2',
            'Qt2' : 'mu2',
            '/' : '/' ,
            '(' : '(' ,
            ')' : ')' ,
            '^' : '**',
            '+' : '+',
            '-' : '-',
            '*' : '*',
            'ZERO' : '0.0_ki'
}


lambdafunc = {  'madf'  :  lambda x,y,z: '%s + %s + %s' % (x,y,z),
                'log'   :  lambda x : 'log(%s)' % x,
                'csqrt' :  lambda x:  'sqrt(%s)' % x,
                'sqrt'  :  lambda x:  'sqrt(%s)' % x,
                'sin'  :  lambda x:  'sin(%s)' % x,
                'cos'  :  lambda x:  'cos(%s)' % x,
                'tan'  :  lambda x:  'tan(%s)' % x,
                'asin'  :  lambda x:  'asin(%s)' % x,
                'acos'  :  lambda x:  'acos(%s)' % x,
                'atan'  :  lambda x:  'atan(%s)' % x,
                'exp'  :  lambda x:  'exp(%s)' % x,
                'pow'  :  lambda x,y : '(%s)**(%s)' % (x,y),
                'atan2' : lambda x,y : 'atan2(%s, %s)' % (x,y),
                'fabs' : lambda x : 'abs(%s)' % (x,y),
                'if' : lambda x,y,z : 'ifpos(%s,%s,%s)' % (x,y,z),
                'complexconjugate' : lambda x : 'conjg(%s)' % x,
                'SpSqrt' : lambda x : 'sqrt(%s)' % x,
                'dotproduct' : lambda x,y : 'dotproduct(%s,%s)' % (x,y),
                'SUBSCRIPT' : lambda f,x :  '%s(%s)' % (f,x),
                'Wrapper' : lambda f: '%s' % f,
                'd' : lambda x,y : 'd(%s,%s)' % (x,y)
            }
