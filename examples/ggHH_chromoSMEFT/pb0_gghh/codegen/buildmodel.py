#! /usr/bin/env python3
# vim: ts=3:sw=3:expandtab

import sys
import os
from optparse import OptionParser
from t2f import translatefile, postformat, getdata
from pythonin import parameters, kinematics, symbols, lambdafunc, dotproducts
config={'parameters' : parameters,
        'kinematics' : kinematics,
        'symbols' : symbols,
        'lambdafunc' : lambdafunc,
        'dotproducts' : dotproducts}


parser = OptionParser()

parser.add_option("-i", "--input", dest="input",
                  action="store", type="string",
                  help="input file", metavar="INPUT")


(options, args) = parser.parse_args()

if not options.input:
    sys.exit("Error: no input file was found! Please specify one with the -i options.")

# print('----------------------------------')

modelfile = open('model.f90', 'w')

#print("--------------------")

outdict=translatefile(options.input,config)
# Write model.f90 file
modelfile.write('module     pb0_gghh_model\n')
modelfile.write('   ! Model parameters for the model: FeynRules,../model/UFO_modHEFT\n')
modelfile.write('   use pb0_gghh_config, only: ki')
modelfile.write(', &\n')
modelfile.write('   & renormalisation, EFTcount, reduction_interoperation, &\n')
modelfile.write('   & reduction_interoperation_rescue, deltaOS, &\n')
modelfile.write('   & nlo_prefactors, convert_to_cdr')
modelfile.write('\n   implicit none\n')
modelfile.write('\n')
modelfile.write('   private :: ki\n')
modelfile.write('   private :: renormalisation, EFTcount, reduction_interoperation\n')
modelfile.write('   private :: reduction_interoperation_rescue\n')
modelfile.write('   private :: deltaOS, nlo_prefactors\n')
modelfile.write('\n')
modelfile.write('   real(ki), parameter :: sqrt2 = &\n')
modelfile.write('      &1.414213562373095048801688724209698078&\n')
modelfile.write('      &5696718753769480731766797379_ki\n')
modelfile.write('   real(ki), parameter :: sqrt3 = &\n')
modelfile.write('      &1.732050807568877293527446341505872366&\n')
modelfile.write('      &9428052538103806280558069795_ki\n')
modelfile.write('   complex(ki) :: gauge1z = (       0.000000000000000_ki,        0.000000000000000_ki)\n')
modelfile.write('   complex(ki) :: gauge2z = (       0.000000000000000_ki,        0.000000000000000_ki)\n')
modelfile.write('   real(ki) :: mdlaEWM1 =      127.900000000000006_ki\n')
modelfile.write('   real(ki),parameter :: mdlaS =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcb =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcgaga =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcgg =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcgghh =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlchhh =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlchhhh =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlct =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlctau =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcthh =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcV =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcVhh =        1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlcZga =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlEFTcount =        3.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat1 =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat2 =      125.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat3 =        2.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat4 =        4.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat5 =        8.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat6 =        3.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlfloat7 =        6.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlGf =        0.000011663700000_ki\n')
modelfile.write('   real(ki) :: mdlLambdam2 =        1.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlMB =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlMC =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlMD =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlMe =        0.000511000000000_ki\n')
modelfile.write('   real(ki) :: mdlMMU =        0.105660000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlMS =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlMT =      173.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlMTA =        1.777000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlMU =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlMZ =       91.187600000000003_ki\n')
modelfile.write('   real(ki),parameter :: mdlWh =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlWT =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlWW =        0.000000000000000_ki\n')
modelfile.write('   real(ki),parameter :: mdlWZ =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymb =        4.700000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymc =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymdo =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlyme =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymm =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlyms =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymt =      173.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymtau =        1.777000000000000_ki\n')
modelfile.write('   real(ki) :: mdlymup =        0.000000000000000_ki\n')
modelfile.write('   real(ki) :: NC =        3.000000000000000_ki\n')
modelfile.write('   real(ki) :: Nf =        5.000000000000000_ki\n')
modelfile.write('   real(ki) :: Nfgen =       -1.000000000000000_ki\n')
modelfile.write('   real(ki) :: mdlZERO\n')
modelfile.write('   real(ki) :: mdlaEW\n')
modelfile.write('   real(ki) :: mdlG\n')
modelfile.write('   complex(ki) :: mdlCKM1x1\n')
modelfile.write('   complex(ki) :: mdlCKM1x2\n')
modelfile.write('   complex(ki) :: mdlCKM1x3\n')
modelfile.write('   complex(ki) :: mdlCKM2x1\n')
modelfile.write('   complex(ki) :: mdlCKM2x2\n')
modelfile.write('   complex(ki) :: mdlCKM2x3\n')
modelfile.write('   complex(ki) :: mdlCKM3x1\n')
modelfile.write('   complex(ki) :: mdlCKM3x2\n')
modelfile.write('   complex(ki) :: mdlCKM3x3\n')
modelfile.write('   real(ki) :: mdlloop\n')
modelfile.write('   real(ki) :: mdlMh\n')
modelfile.write('   real(ki) :: mdlMW\n')
modelfile.write('   real(ki) :: mdlee\n')
modelfile.write('   real(ki) :: mdlsw2\n')
modelfile.write('   real(ki) :: mdlcw\n')
modelfile.write('   real(ki) :: mdlsw\n')
modelfile.write('   real(ki) :: mdlg1\n')
modelfile.write('   real(ki) :: mdlgw\n')
modelfile.write('   real(ki) :: mdlvev\n')
modelfile.write('   real(ki) :: mdlv\n')
modelfile.write('   real(ki) :: mdlyb\n')
modelfile.write('   real(ki) :: mdlyc\n')
modelfile.write('   real(ki) :: mdlydo\n')
modelfile.write('   real(ki) :: mdlye\n')
modelfile.write('   real(ki) :: mdlym\n')
modelfile.write('   real(ki) :: mdlys\n')
modelfile.write('   real(ki) :: mdlyt\n')
modelfile.write('   real(ki) :: mdlytau\n')
modelfile.write('   real(ki) :: mdlyup\n')
modelfile.write('   real(ki) :: mdlnormh3\n')
modelfile.write('   real(ki) :: mdlnormh4\n')
modelfile.write('   real(ki) :: mdlyyb\n')
modelfile.write('   real(ki) :: mdlyyt\n')
modelfile.write('   real(ki) :: mdlyytau\n')
modelfile.write('   real(ki) :: Nfrat\n')
modelfile.write('   complex(ki) :: mdlGC1\n')
modelfile.write('   complex(ki) :: mdlGC2\n')
modelfile.write('   complex(ki) :: mdlGC3\n')
modelfile.write('   complex(ki) :: mdlGC4\n')
modelfile.write('   complex(ki) :: mdlGC5\n')
modelfile.write('   complex(ki) :: mdlGC6\n')
modelfile.write('   complex(ki) :: mdlGC7\n')
modelfile.write('   complex(ki) :: mdlGC8\n')
modelfile.write('   complex(ki) :: mdlGC9\n')
modelfile.write('   complex(ki) :: mdlGC9SM\n')
modelfile.write('   complex(ki) :: mdlGC9DIM6\n')
modelfile.write('   complex(ki) :: mdlGC10\n')
modelfile.write('   complex(ki) :: mdlGC11\n')
modelfile.write('   complex(ki) :: mdlGC12\n')
modelfile.write('   complex(ki) :: mdlGC13\n')
modelfile.write('   complex(ki) :: mdlGC14\n')
modelfile.write('   complex(ki) :: mdlGC15\n')
modelfile.write('   complex(ki) :: mdlGC16\n')
modelfile.write('   complex(ki) :: mdlGC17\n')
modelfile.write('   complex(ki) :: mdlGC18\n')
modelfile.write('   complex(ki) :: mdlGC19\n')
modelfile.write('   complex(ki) :: mdlGC20\n')
modelfile.write('   complex(ki) :: mdlGC21\n')
modelfile.write('   complex(ki) :: mdlGC22\n')
modelfile.write('   complex(ki) :: mdlGC23\n')
modelfile.write('   complex(ki) :: mdlGC24\n')
modelfile.write('   complex(ki) :: mdlGC25\n')
modelfile.write('   complex(ki) :: mdlGC26\n')
modelfile.write('   complex(ki) :: mdlGC27\n')
modelfile.write('   complex(ki) :: mdlGC28\n')
modelfile.write('   complex(ki) :: mdlGC29\n')
modelfile.write('   complex(ki) :: mdlGC30\n')
modelfile.write('   complex(ki) :: mdlGC31\n')
modelfile.write('   complex(ki) :: mdlGC31DIM6\n')
modelfile.write('   complex(ki) :: mdlGC32\n')
modelfile.write('   complex(ki) :: mdlGC32DIM6\n')
modelfile.write('   complex(ki) :: mdlGC33\n')
modelfile.write('   complex(ki) :: mdlGC33DIM6\n')
modelfile.write('   complex(ki) :: mdlGC34\n')
modelfile.write('   complex(ki) :: mdlGC34DIM6\n')
modelfile.write('   complex(ki) :: mdlGC35\n')
modelfile.write('   complex(ki) :: mdlGC35DIM6\n')
modelfile.write('   complex(ki) :: mdlGC36\n')
modelfile.write('   complex(ki) :: mdlGC36DIM6\n')
modelfile.write('   complex(ki) :: mdlGC37\n')
modelfile.write('   complex(ki) :: mdlGC38\n')
modelfile.write('   complex(ki) :: mdlGC39\n')
modelfile.write('   complex(ki) :: mdlGC39SM\n')
modelfile.write('   complex(ki) :: mdlGC39DIM6\n')
modelfile.write('   complex(ki) :: mdlGC40\n')
modelfile.write('   complex(ki) :: mdlGC40DIM6\n')
modelfile.write('   complex(ki) :: mdlGC41\n')
modelfile.write('   complex(ki) :: mdlGC41SM\n')
modelfile.write('   complex(ki) :: mdlGC41DIM6\n')
modelfile.write('   complex(ki) :: mdlGC42\n')
modelfile.write('   complex(ki) :: mdlGC43\n')
modelfile.write('   complex(ki) :: mdlGC44\n')
modelfile.write('   complex(ki) :: mdlGC45\n')
modelfile.write('   complex(ki) :: mdlGC46\n')
modelfile.write('   complex(ki) :: mdlGC47\n')
modelfile.write('   complex(ki) :: mdlGC48\n')
modelfile.write('   complex(ki) :: mdlGC49\n')
modelfile.write('   complex(ki) :: mdlGC50\n')
modelfile.write('   integer, parameter, private :: line_length = 80\n')
#
#   ' what is our longest extra name ?
#   ' 0   0    1    1    2    2
#   ' 1---5----0----5----0----5
#   ' samurai_group_numerators
#   ' reduction_interoperation
#   ' samurai_verbatim
#   ' renormalisation
#   ' samurai_scalar
#   ' samurai_test
#   '
#   ' ==> the longest is 24
#
modelfile.write('   integer, parameter, private :: name_length = max(11,24)\n')
modelfile.write('   character(len=name_length), dimension(35) :: names = (/&\n')
modelfile.write('      & "gauge1z    "')
modelfile.write(', &\n')

modelfile.write('      & "gauge2z    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlaEWM1   "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcb      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcgaga   "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcgg     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcgghh   "')
modelfile.write(', &\n')

modelfile.write('      & "mdlchhh    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlchhhh   "')
modelfile.write(', &\n')

modelfile.write('      & "mdlct      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlctau    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcthh    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcV      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcVhh    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlcZga    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlEFTcount"')
modelfile.write(', &\n')

modelfile.write('      & "mdlGf      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlLambdam2"')
modelfile.write(', &\n')

modelfile.write('      & "mdlMe      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlMMU     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlMT      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlMTA     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlMZ      "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymb     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymc     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymdo    "')
modelfile.write(', &\n')

modelfile.write('      & "mdlyme     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymm     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlyms     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymt     "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymtau   "')
modelfile.write(', &\n')

modelfile.write('      & "mdlymup    "')
modelfile.write(', &\n')

modelfile.write('      & "NC         "')
modelfile.write(', &\n')

modelfile.write('      & "Nf         "')
modelfile.write(', &\n')

modelfile.write('      & "Nfgen      "')
modelfile.write('/)\n')
   
modelfile.write('   character(len=1), dimension(3) :: cc = (/')
modelfile.write(' \'#\'')
modelfile.write(',')
modelfile.write(' \'!\'')
modelfile.write(',')
modelfile.write(' \';\'')
modelfile.write('/)\n')
modelfile.write('\n')

modelfile.write("   private :: digit, parsereal, names, cc\n")
modelfile.write("\n")
modelfile.write("contains\n")
modelfile.write("\n")

modelfile.write("!---#[ print_parameter:\n")
modelfile.write("   ! Print current parameters / setup to stdout or output_unit\n")
modelfile.write("   subroutine   print_parameter(verbose,output_unit)\n")
modelfile.write("      implicit none\n")
modelfile.write("      logical, intent(in), optional :: verbose\n")
modelfile.write("      integer, intent(in), optional :: output_unit\n")
modelfile.write("      logical :: is_verbose\n")
modelfile.write("      integer :: unit\n")
modelfile.write("\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("      is_verbose = .false.\n")
modelfile.write("      if(present(verbose)) then\n")
modelfile.write("          is_verbose = verbose\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("      unit = 6 ! stdout\n")
modelfile.write("      if(present(output_unit)) then\n")
modelfile.write("          unit = output_unit\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("\n")
modelfile.write("   write(unit,'(A1,1x,A26)') \"#\", \"--------- SETUP ---------\"\n")
modelfile.write("   write(unit,'(A1,1x,A11,I2)') \"#\", \"EFTcount = \", EFTcount\n")
modelfile.write("   write(unit,'(A1,1x,A18,I2)') \"#\", \"renormalisation = \", renormalisation\n")
modelfile.write("   if(convert_to_cdr) then\n")
modelfile.write("      write(unit,'(A1,1x,A9,A3)') \"#\", \"scheme = \", \"CDR\"\n")
modelfile.write("   else\n")
modelfile.write("      write(unit,'(A1,1x,A9,A4)') \"#\", \"scheme = \", \"DRED\"\n")
modelfile.write("   end if\n")
modelfile.write("   if(reduction_interoperation.eq.0) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A7)') \"#\", \"reduction with \", \"SAMURAI\"\n")
modelfile.write("   else if(reduction_interoperation.eq.1) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A7)') \"#\", \"reduction with \", \"GOLEM95\"\n")
modelfile.write("   else if(reduction_interoperation.eq.2) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A15)') \"#\", \"reduction with \", \"NINJA\"\n")
modelfile.write("   else if(reduction_interoperation.eq.3) then\n")
modelfile.write("      write(unit,'(A1,1x,A15,A5)') \"#\", \"reduction with \", \"PJFRY\"\n")
modelfile.write("   end if\n")
modelfile.write("   if(reduction_interoperation_rescue.ne.reduction_interoperation) then\n")
modelfile.write("      if(reduction_interoperation_rescue.eq.0) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A7)') \"#\", \"    --> rescue \", \"SAMURAI\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.1) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A7)') \"#\", \"    --> rescue \", \"GOLEM95\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.2) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A15)') \"#\", \"    --> rescue \", \"NINJA\"\n")
modelfile.write("      else if(reduction_interoperation_rescue.eq.3) then\n")
modelfile.write("         write(unit,'(A1,1x,A15,A5)') \"#\", \"    --> rescue \", \"PJFRY\"\n")
modelfile.write("      end if\n")
modelfile.write("   end if\n")

modelfile.write("   write(unit,'(A1,1x,A21)') \"#\", \"--- ALL PARAMETERS ---\"\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\")') \"#\", \"gauge1z= \", gauge1z\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\")') \"#\", \"gauge2z= \", gauge2z\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlaEWM1= \", mdlaEWM1\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlaS= \", mdlaS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcb= \", mdlcb\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcgaga= \", mdlcgaga\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcgg= \", mdlcgg\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcgghh= \", mdlcgghh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlchhh= \", mdlchhh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlchhhh= \", mdlchhhh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlct= \", mdlct\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlctau= \", mdlctau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcthh= \", mdlcthh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcV= \", mdlcV\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcVhh= \", mdlcVhh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlcZga= \", mdlcZga\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlEFTcount= \", mdlEFTcount\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat1= \", mdlfloat1\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat2= \", mdlfloat2\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat3= \", mdlfloat3\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat4= \", mdlfloat4\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat5= \", mdlfloat5\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat6= \", mdlfloat6\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlfloat7= \", mdlfloat7\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlGf= \", mdlGf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlLambdam2= \", mdlLambdam2\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlMB= \", mdlMB\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlMC= \", mdlMC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlMD= \", mdlMD\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlMe= \", mdlMe\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlMMU= \", mdlMMU\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlMS= \", mdlMS\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlMT= \", mdlMT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlMTA= \", mdlMTA\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlMU= \", mdlMU\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlMZ= \", mdlMZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlWh= \", mdlWh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlWT= \", mdlWT\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlWW= \", mdlWW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"const.\")') \"#\", \"mdlWZ= \", mdlWZ\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymb= \", mdlymb\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymc= \", mdlymc\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymdo= \", mdlymdo\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlyme= \", mdlyme\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymm= \", mdlymm\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlyms= \", mdlyms\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymt= \", mdlymt\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymtau= \", mdlymtau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"mdlymup= \", mdlymup\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"NC   = \", NC\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"Nf   = \", Nf\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16)') \"#\", \"Nfgen= \", Nfgen\n")

modelfile.write("   if(is_verbose) then\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlZERO= \", mdlZERO\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlaEW= \", mdlaEW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlG = \", mdlG\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM1x1= \", mdlCKM1x1\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM1x2= \", mdlCKM1x2\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM1x3= \", mdlCKM1x3\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM2x1= \", mdlCKM2x1\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM2x2= \", mdlCKM2x2\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM2x3= \", mdlCKM2x3\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM3x1= \", mdlCKM3x1\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM3x2= \", mdlCKM3x2\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlCKM3x3= \", mdlCKM3x3\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlloop= \", mdlloop\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlMh= \", mdlMh\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlMW= \", mdlMW\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlee= \", mdlee\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlsw2= \", mdlsw2\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlcw= \", mdlcw\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlsw= \", mdlsw\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlg1= \", mdlg1\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlgw= \", mdlgw\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlvev= \", mdlvev\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlv = \", mdlv\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyb= \", mdlyb\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyc= \", mdlyc\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlydo= \", mdlydo\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlye= \", mdlye\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlym= \", mdlym\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlys= \", mdlys\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyt= \", mdlyt\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlytau= \", mdlytau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyup= \", mdlyup\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlnormh3= \", mdlnormh3\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlnormh4= \", mdlnormh4\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyyb= \", mdlyyb\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyyt= \", mdlyyt\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"mdlyytau= \", mdlyytau\n")

modelfile.write("   write(unit,'(A1,1x,A11,G23.16,\"calc.\")') \"#\", \"Nfrat= \", Nfrat\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC1= \", mdlGC1\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC2= \", mdlGC2\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC3= \", mdlGC3\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC4= \", mdlGC4\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC5= \", mdlGC5\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC6= \", mdlGC6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC7= \", mdlGC7\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC8= \", mdlGC8\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC9= \", mdlGC9\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC9SM= \", mdlGC9SM\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC9DIM6= \", mdlGC9DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC10= \", mdlGC10\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC11= \", mdlGC11\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC12= \", mdlGC12\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC13= \", mdlGC13\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC14= \", mdlGC14\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC15= \", mdlGC15\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC16= \", mdlGC16\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC17= \", mdlGC17\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC18= \", mdlGC18\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC19= \", mdlGC19\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC20= \", mdlGC20\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC21= \", mdlGC21\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC22= \", mdlGC22\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC23= \", mdlGC23\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC24= \", mdlGC24\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC25= \", mdlGC25\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC26= \", mdlGC26\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC27= \", mdlGC27\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC28= \", mdlGC28\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC29= \", mdlGC29\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC30= \", mdlGC30\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC31= \", mdlGC31\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC31DIM6= \", mdlGC31DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC32= \", mdlGC32\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC32DIM6= \", mdlGC32DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC33= \", mdlGC33\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC33DIM6= \", mdlGC33DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC34= \", mdlGC34\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC34DIM6= \", mdlGC34DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC35= \", mdlGC35\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC35DIM6= \", mdlGC35DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC36= \", mdlGC36\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC36DIM6= \", mdlGC36DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC37= \", mdlGC37\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC38= \", mdlGC38\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC39= \", mdlGC39\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC39SM= \", mdlGC39SM\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC39DIM6= \", mdlGC39DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC40= \", mdlGC40\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC40DIM6= \", mdlGC40DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC41= \", mdlGC41\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC41SM= \", mdlGC41SM\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC41DIM6= \", mdlGC41DIM6\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC42= \", mdlGC42\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC43= \", mdlGC43\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC44= \", mdlGC44\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC45= \", mdlGC45\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC46= \", mdlGC46\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC47= \", mdlGC47\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC48= \", mdlGC48\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC49= \", mdlGC49\n")

modelfile.write("   write(unit,'(A1,1x,A11,\"(\",G23.16,G23.16,\")\",\" calc.\")') \"#\", \"mdlGC50= \", mdlGC50\n")

modelfile.write("   end if\n")

modelfile.write("   write(unit,'(A1,1x,A25)') \"#\", \"-------------------------\"\n")
modelfile.write("   end subroutine\n")
modelfile.write("!---#] print_parameter:\n")

modelfile.write("   function     digit(ch, lnr) result(d)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=1), intent(in) :: ch\n")
modelfile.write("      integer, intent(in) :: lnr\n")
modelfile.write("      integer :: d\n")
modelfile.write("      d = -1\n")
modelfile.write("      select case(ch)\n")
modelfile.write("         case(\'0\')\n")
modelfile.write("            d = 0\n")
modelfile.write("         case(\'1\')\n")
modelfile.write("            d = 1\n")
modelfile.write("         case(\'2\')\n")
modelfile.write("            d = 2\n")
modelfile.write("         case(\'3\')\n")
modelfile.write("            d = 3\n")
modelfile.write("         case(\'4\')\n")
modelfile.write("            d = 4\n")
modelfile.write("         case(\'5\')\n")
modelfile.write("            d = 5\n")
modelfile.write("         case(\'6\')\n")
modelfile.write("            d = 6\n")
modelfile.write("         case(\'7\')\n")
modelfile.write("            d = 7\n")
modelfile.write("         case(\'8\')\n")
modelfile.write("            d = 8\n")
modelfile.write("         case(\'9\')\n")
modelfile.write("            d = 9\n")
modelfile.write("         case default\n")
modelfile.write("            write(*,'(A21,1x,I5)') 'invalid digit in line', lnr\n")
modelfile.write("         end select\n")
modelfile.write("   end function digit\n")
modelfile.write("\n")
modelfile.write("   function     parsereal(str, ierr, lnr) result(num)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: str\n")
modelfile.write("      integer, intent(out) :: ierr\n")
modelfile.write("      integer, intent(in) :: lnr\n")
modelfile.write("      integer, dimension(0:3,0:4), parameter :: DFA = &\n")
modelfile.write("      & reshape( (/1,  1,  2, -1,   & ! state = 0\n")
modelfile.write("      &            1, -1,  2,  3,   & ! state = 1\n")
modelfile.write("      &            2, -1, -1,  3,   & ! state = 2\n")
modelfile.write("      &            4,  4, -1, -1,   & ! state = 3\n")
modelfile.write("      &            4, -1, -1, -1/), (/4, 5/))\n")
modelfile.write("      real(ki) :: num\n")
modelfile.write("      integer :: i, expo, ofs, state, cclass, d, s1, s2\n")
modelfile.write("      num = 0.0_ki\n")
modelfile.write("      expo = 0\n")
modelfile.write("      state = 0\n")
modelfile.write("      ofs = 0\n")
modelfile.write("      s1 = 1\n")
modelfile.write("      s2 = 1\n")
modelfile.write("      d = -1\n")
modelfile.write("      cclass = -1\n")
modelfile.write("      do i=1,len(str)\n")
modelfile.write("         select case(str(i:i))\n")
modelfile.write("         case('_', '''', ' ')\n")
modelfile.write("            cycle\n")
modelfile.write("         case('+', '-')\n")
modelfile.write("            cclass = 1\n")
modelfile.write("         case('.')\n")
modelfile.write("            cclass = 2\n")
modelfile.write("         case('E', 'e')\n")
modelfile.write("            cclass = 3\n")
modelfile.write("         case default\n")
modelfile.write("            cclass = 0\n")
modelfile.write("            d = digit(str(i:i), lnr)\n")
modelfile.write("            if (d .eq. -1) then\n")
modelfile.write("               ierr = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         end select\n")
modelfile.write("         if (cclass .eq. 0) then\n")
modelfile.write("            select case(state)\n")
modelfile.write("            case(0, 1)\n")
modelfile.write("               num = 10.0_ki * num + d\n")
modelfile.write("            case(2)\n")
modelfile.write("               num = 10.0_ki * num + d\n")
modelfile.write("               ofs = ofs - 1\n")
modelfile.write("            case(4)\n")
modelfile.write("               expo = 10 * expo + d\n")
modelfile.write("            end select\n")
modelfile.write("         elseif ((cclass .eq. 1) .and. (str(i:i) .eq. '-')) then\n")
modelfile.write("            if (state .eq. 0) then\n")
modelfile.write("               s1 = -1\n")
modelfile.write("            else\n")
modelfile.write("               s2 = -1\n")
modelfile.write("            endif\n")
modelfile.write("         end if\n")
modelfile.write("         ! Advance in the DFA\n")
modelfile.write("         state = DFA(cclass, state)\n")
modelfile.write("         if (state < 0) then\n")
modelfile.write("            write(*,'(A21,1x,A1,1x,A7,I5)') 'invalid position for', &\n")
modelfile.write("            & str(i:i), 'in line', lnr\n")
modelfile.write("            ierr = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("      end do\n")
modelfile.write("      num = s1 * num * 10.0_ki**(ofs + s2 * expo)\n")
modelfile.write("      ierr = 0\n")
modelfile.write("   end function parsereal\n")
modelfile.write("\n")
modelfile.write("   subroutine     parseline(line,stat,line_number)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out) :: stat\n")
modelfile.write("      integer, intent(in), optional :: line_number\n")
modelfile.write("\n")
modelfile.write("      character(len=line_length) :: rvalue, ivalue, value\n")
modelfile.write("      character(len=name_length) :: name\n")
modelfile.write("      real(ki) :: re, im\n")
modelfile.write("      integer :: idx, icomma, idx1, idx2, lnr, nidx, ierr, pdg\n")
modelfile.write("\n")
modelfile.write("      if(present(line_number)) then\n")
modelfile.write("         lnr = line_number\n")
modelfile.write("      else\n")
modelfile.write("         lnr = 0\n")
modelfile.write("      end if\n")
modelfile.write("\n")
modelfile.write("      idx = scan(line, '=', .false.)\n")
modelfile.write("      if (idx .eq. 0) then\n")
modelfile.write("         if(present(line_number)) then\n")
modelfile.write("            write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("         else\n")
modelfile.write("            write(*,'(A18)') 'error in parseline'\n")
modelfile.write("         end if\n")
modelfile.write("         stat = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      name = adjustl(line(1:idx-1))\n")
modelfile.write("      value = adjustl(line(idx+1:len(line)))\n")
modelfile.write("      idx = scan(value, ',', .false.)\n")
modelfile.write("\n")
modelfile.write("      if (name .eq. \"renormalisation\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         renormalisation = int(re)\n")
modelfile.write("      elseif (name .eq. \"EFTcount\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         EFTcount = int(re)\n")
modelfile.write("      elseif (name .eq. \"nlo_prefactors\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         nlo_prefactors = int(re)\n")
modelfile.write("      elseif (name .eq. \"deltaOS\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         deltaOS = int(re)\n")
modelfile.write("      elseif (name .eq. \"reduction_interoperation\") then\n")
modelfile.write("         re = parsereal(value, ierr, lnr)\n")
modelfile.write("         if (ierr .ne. 0) then\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         reduction_interoperation = int(re)\n")
modelfile.write("      elseif (any(names .eq. name)) then\n")
modelfile.write("         do nidx=1,size(names)\n")
modelfile.write("            if (names(nidx) .eq. name) exit\n")
modelfile.write("         end do\n")
modelfile.write("         if (idx .gt. 0) then\n")
modelfile.write("            rvalue = value(1:idx-1)\n")
modelfile.write("            ivalue = value(idx+1:len(value))\n")
modelfile.write("            re = parsereal(rvalue, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("            im = parsereal(ivalue, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         else\n")
modelfile.write("            re = parsereal(value, ierr, lnr)\n")
modelfile.write("            if (ierr .ne. 0) then\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("            im = 0.0_ki\n")
modelfile.write("         end if\n")
modelfile.write("         select case (nidx)\n")
modelfile.write("         case(1)\n")
modelfile.write("            gauge1z = ")
modelfile.write("cmplx(re, im, ki)\n")
modelfile.write("         case(2)\n")
modelfile.write("            gauge2z = ")
modelfile.write("cmplx(re, im, ki)\n")
modelfile.write("         case(3)\n")
modelfile.write("            mdlaEWM1 = ")
modelfile.write("re\n")
modelfile.write("         case(4)\n")
modelfile.write("            mdlcb = ")
modelfile.write("re\n")
modelfile.write("         case(5)\n")
modelfile.write("            mdlcgaga = ")
modelfile.write("re\n")
modelfile.write("         case(6)\n")
modelfile.write("            mdlcgg = ")
modelfile.write("re\n")
modelfile.write("         case(7)\n")
modelfile.write("            mdlcgghh = ")
modelfile.write("re\n")
modelfile.write("         case(8)\n")
modelfile.write("            mdlchhh = ")
modelfile.write("re\n")
modelfile.write("         case(9)\n")
modelfile.write("            mdlchhhh = ")
modelfile.write("re\n")
modelfile.write("         case(10)\n")
modelfile.write("            mdlct = ")
modelfile.write("re\n")
modelfile.write("         case(11)\n")
modelfile.write("            mdlctau = ")
modelfile.write("re\n")
modelfile.write("         case(12)\n")
modelfile.write("            mdlcthh = ")
modelfile.write("re\n")
modelfile.write("         case(13)\n")
modelfile.write("            mdlcV = ")
modelfile.write("re\n")
modelfile.write("         case(14)\n")
modelfile.write("            mdlcVhh = ")
modelfile.write("re\n")
modelfile.write("         case(15)\n")
modelfile.write("            mdlcZga = ")
modelfile.write("re\n")
modelfile.write("         case(16)\n")
modelfile.write("            mdlEFTcount = ")
modelfile.write("re\n")
modelfile.write("         case(17)\n")
modelfile.write("            mdlGf = ")
modelfile.write("re\n")
modelfile.write("         case(18)\n")
modelfile.write("            mdlLambdam2 = ")
modelfile.write("re\n")
modelfile.write("         case(19)\n")
modelfile.write("            mdlMe = ")
modelfile.write("re\n")
modelfile.write("         case(20)\n")
modelfile.write("            mdlMMU = ")
modelfile.write("re\n")
modelfile.write("         case(21)\n")
modelfile.write("            mdlMT = ")
modelfile.write("re\n")
modelfile.write("         case(22)\n")
modelfile.write("            mdlMTA = ")
modelfile.write("re\n")
modelfile.write("         case(23)\n")
modelfile.write("            mdlMZ = ")
modelfile.write("re\n")
modelfile.write("         case(24)\n")
modelfile.write("            mdlymb = ")
modelfile.write("re\n")
modelfile.write("         case(25)\n")
modelfile.write("            mdlymc = ")
modelfile.write("re\n")
modelfile.write("         case(26)\n")
modelfile.write("            mdlymdo = ")
modelfile.write("re\n")
modelfile.write("         case(27)\n")
modelfile.write("            mdlyme = ")
modelfile.write("re\n")
modelfile.write("         case(28)\n")
modelfile.write("            mdlymm = ")
modelfile.write("re\n")
modelfile.write("         case(29)\n")
modelfile.write("            mdlyms = ")
modelfile.write("re\n")
modelfile.write("         case(30)\n")
modelfile.write("            mdlymt = ")
modelfile.write("re\n")
modelfile.write("         case(31)\n")
modelfile.write("            mdlymtau = ")
modelfile.write("re\n")
modelfile.write("         case(32)\n")
modelfile.write("            mdlymup = ")
modelfile.write("re\n")
modelfile.write("         case(33)\n")
modelfile.write("            NC = ")
modelfile.write("re\n")
modelfile.write("         case(34)\n")
modelfile.write("            Nf = ")
modelfile.write("re\n")
modelfile.write("         case(35)\n")
modelfile.write("            Nfgen = ")
modelfile.write("re\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:9).eq."sminputs(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(10:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(10:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(1)\n")
modelfile.write("               mdlaEWM1 = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(2)\n")
modelfile.write("               mdlGf = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set sminputs for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:7).eq."yukawa(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(8:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(8:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(1)\n")
modelfile.write("               mdlymdo = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(2)\n")
modelfile.write("               mdlymup = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(3)\n")
modelfile.write("               mdlyms = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(4)\n")
modelfile.write("               mdlymc = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               mdlymb = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mdlymt = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               mdlyme = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mdlymm = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               mdlymtau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set yukawa for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:8).eq."frblock(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(9:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(9:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(14)\n")
modelfile.write("               mdlEFTcount = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(1)\n")
modelfile.write("               mdlLambdam2 = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(2)\n")
modelfile.write("               mdlct = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(3)\n")
modelfile.write("               mdlcgg = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(4)\n")
modelfile.write("               mdlcgghh = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(5)\n")
modelfile.write("               mdlcthh = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mdlchhh = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(7)\n")
modelfile.write("               mdlchhhh = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(8)\n")
modelfile.write("               mdlcV = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(9)\n")
modelfile.write("               mdlcb = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(10)\n")
modelfile.write("               mdlctau = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               mdlcgaga = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(12)\n")
modelfile.write("               mdlcZga = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mdlcVhh = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set frblock for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:5).eq."mass(") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(6:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write("            write(*,*) \"Not an integer:\", name(6:idx-1)\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         select case(pdg)\n")
modelfile.write("            case(23)\n")
modelfile.write("               mdlMZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               mdlMe = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mdlMMU = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               mdlMTA = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mdlMT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("         end select\n")
modelfile.write('      elseif (name(1:2).eq.\"m(\" .or. name(1:2).eq.\"w(\") then\n')
modelfile.write("         idx = scan(name, ')', .false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         endif\n")
modelfile.write("         read(name(3:idx-1),*, iostat=ierr) pdg\n")
modelfile.write("         if (ierr.ne.0) then\n")
modelfile.write('            write(*,*) "pdg is not an integer:", name(3:idx-1)\n')
modelfile.write("            if(present(line_number)) then\n")
modelfile.write("               write(*,'(A13,1x,I5)') 'error at line', line_number\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A18)') 'error in parseline'\n")
modelfile.write("            end if\n")
modelfile.write("            stat = 1\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         if (name(1:1).eq.\"m\") then\n")
modelfile.write("            ! set mass according to PDG code\n")
modelfile.write("            select case(pdg)\n")
modelfile.write("            case(23)\n")
modelfile.write("               mdlMZ = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(11)\n")
modelfile.write("               mdlMe = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(13)\n")
modelfile.write("               mdlMMU = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(15)\n")
modelfile.write("               mdlMTA = parsereal(value, ierr, lnr)\n")
modelfile.write("            case(6)\n")
modelfile.write("               mdlMT = parsereal(value, ierr, lnr)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for PDG code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("         else\n")
modelfile.write("            ! set width according to PDG code\n")
modelfile.write("            select case(pdg)\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set width for PDG code:\", pdg\n")
modelfile.write("               stat = 1\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("         endif\n")
modelfile.write("      else\n")
modelfile.write("         write(*,'(A20,1x,A20)') 'Unrecognized option:', name\n")
modelfile.write("         stat = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      stat = 0\n")
modelfile.write("   end subroutine parseline\n")
modelfile.write("\n")
modelfile.write("   subroutine     parse(aunit)\n")
modelfile.write("      implicit none\n")
modelfile.write("      integer, intent(in) :: aunit\n")
modelfile.write("      character(len=line_length) :: line\n")
modelfile.write("      integer :: ios, lnr\n")
modelfile.write("      lnr = 0\n")
modelfile.write("      loop1: do\n")
modelfile.write("         read(unit=aunit,fmt='(A80)',iostat=ios) line\n")
modelfile.write("         if(ios .ne. 0) exit\n")
modelfile.write("         lnr = lnr + 1\n")
modelfile.write("         line = adjustl(line)\n")
modelfile.write("         if (line .eq. '') cycle loop1\n")
modelfile.write("         if (any(cc .eq. line(1:1))) cycle loop1\n")
modelfile.write("\n")
modelfile.write("         call parseline(line,ios,lnr)\n")
modelfile.write("         if(ios .ne. 0) then\n")
modelfile.write("            write(*,'(A44,I2,A1)') &\n")
modelfile.write("            & 'Error while reading parameter file in parse(', aunit, ')'\n")
modelfile.write("         end if\n")
modelfile.write("      end do loop1\n")
modelfile.write("   end subroutine parse\n")
modelfile.write("!---#[ SLHA READER:\n")
modelfile.write("   subroutine     read_slha(ch, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      integer, intent(in) :: ch\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("\n")
modelfile.write("      integer :: lnr, i, l, ofs, ios\n")
modelfile.write("      character(len=255) :: line\n")
modelfile.write("\n")
modelfile.write("      integer :: block\n")
modelfile.write("\n")
modelfile.write("      ofs = iachar('A') - iachar('a')\n")
modelfile.write("\n")
modelfile.write("      lnr = 0\n")
modelfile.write("      loop1: do\n")
modelfile.write("         read(unit=ch,fmt='(A80)',iostat=ios) line\n")
modelfile.write("         if(ios .ne. 0) exit\n")
modelfile.write("         lnr = lnr + 1\n")
modelfile.write("\n")
modelfile.write("         i = scan(line, '#', .false.)\n")
modelfile.write("         if (i .eq. 0) then\n")
modelfile.write("            l = len_trim(line)\n")
modelfile.write("         else\n")
modelfile.write("            l = i - 1\n")
modelfile.write("         end if\n")
modelfile.write("\n")
modelfile.write("         if (l .eq. 0) cycle loop1\n")
modelfile.write("\n")
modelfile.write("         ucase: do i = 1, l\n")
modelfile.write("            if (line(i:i) >= 'a' .and. line(i:i) <= 'z') then\n")
modelfile.write("               line(i:i) = achar(iachar(line(i:i))+ofs)\n")
modelfile.write("            end if\n")
modelfile.write("         end do ucase\n")
modelfile.write("\n")
modelfile.write("         if (line(1:1) .eq. 'B') then\n")
modelfile.write("            if (line(1:5) .eq. 'BLOCK') then\n")
modelfile.write("               line = adjustl(line(6:l))\n")
modelfile.write("               do i=1,l\n")
modelfile.write("                 if (line(i:i) <= ' ') exit\n")
modelfile.write("               end do\n")
modelfile.write("               l = i\n")
               
modelfile.write("           if (\"SMINPUTS\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 0\n")
               
modelfile.write("           else")
modelfile.write("           if (\"YUKAWA\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 1\n")
               
modelfile.write("           else")
modelfile.write("           if (\"FRBLOCK\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 2\n")
               
modelfile.write("           else")
modelfile.write("           if (\"MASS\" .eq. line(1:l)) then\n")
modelfile.write("                  block = 3\n")
modelfile.write("               else\n")
modelfile.write("                  block = -1\n")
modelfile.write("               end if\n")
modelfile.write("            else\n")
modelfile.write("               write(*,'(A37,I5)') \"Illegal statement in SLHA file, line \", lnr\n")
modelfile.write("               if (present(ierr)) ierr = 1\n")
modelfile.write("               return\n")
modelfile.write("            end if\n")
modelfile.write("         else\n")
modelfile.write("            ! read a parameter line\n")
modelfile.write("            select case(block)\n")
modelfile.write("            case(0)\n")
modelfile.write("               call read_slha_block_sminputs(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case(1)\n")
modelfile.write("               call read_slha_block_yukawa(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case(2)\n")
modelfile.write("               call read_slha_block_frblock(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case(3)\n")
modelfile.write("               call read_slha_block_mass(line(1:l), i)\n")
modelfile.write("               if (i .ne. 0) then\n")
modelfile.write("                  if (present(ierr)) ierr = 1\n")
modelfile.write("                  write(*,'(A44,I5)') &\n")
modelfile.write("                  & \"Unrecognized line format in SLHA file, line \", lnr\n")
modelfile.write("                  return\n")
modelfile.write("               end if\n")
modelfile.write("            case default\n")
modelfile.write("               cycle loop1\n")
modelfile.write("            end select\n")
modelfile.write("         end if\n")
modelfile.write("      end do loop1\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha\n")
modelfile.write("   subroutine read_slha_block_sminputs(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(1)\n")
modelfile.write("         mdlaEWM1 = value\n")
modelfile.write("      case(2)\n")
modelfile.write("         mdlGf = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_sminputs\n")
modelfile.write("   subroutine read_slha_block_yukawa(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(1)\n")
modelfile.write("         mdlymdo = value\n")
modelfile.write("      case(2)\n")
modelfile.write("         mdlymup = value\n")
modelfile.write("      case(3)\n")
modelfile.write("         mdlyms = value\n")
modelfile.write("      case(4)\n")
modelfile.write("         mdlymc = value\n")
modelfile.write("      case(5)\n")
modelfile.write("         mdlymb = value\n")
modelfile.write("      case(6)\n")
modelfile.write("         mdlymt = value\n")
modelfile.write("      case(11)\n")
modelfile.write("         mdlyme = value\n")
modelfile.write("      case(13)\n")
modelfile.write("         mdlymm = value\n")
modelfile.write("      case(15)\n")
modelfile.write("         mdlymtau = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_yukawa\n")
modelfile.write("   subroutine read_slha_block_frblock(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(14)\n")
modelfile.write("         mdlEFTcount = value\n")
modelfile.write("      case(1)\n")
modelfile.write("         mdlLambdam2 = value\n")
modelfile.write("      case(2)\n")
modelfile.write("         mdlct = value\n")
modelfile.write("      case(3)\n")
modelfile.write("         mdlcgg = value\n")
modelfile.write("      case(4)\n")
modelfile.write("         mdlcgghh = value\n")
modelfile.write("      case(5)\n")
modelfile.write("         mdlcthh = value\n")
modelfile.write("      case(6)\n")
modelfile.write("         mdlchhh = value\n")
modelfile.write("      case(7)\n")
modelfile.write("         mdlchhhh = value\n")
modelfile.write("      case(8)\n")
modelfile.write("         mdlcV = value\n")
modelfile.write("      case(9)\n")
modelfile.write("         mdlcb = value\n")
modelfile.write("      case(10)\n")
modelfile.write("         mdlctau = value\n")
modelfile.write("      case(11)\n")
modelfile.write("         mdlcgaga = value\n")
modelfile.write("      case(12)\n")
modelfile.write("         mdlcZga = value\n")
modelfile.write("      case(13)\n")
modelfile.write("         mdlcVhh = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_frblock\n")
modelfile.write("   subroutine read_slha_block_mass(line, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      character(len=*), intent(in) :: line\n")
modelfile.write("      integer, intent(out), optional :: ierr\n")
modelfile.write("      integer :: idx1,ioerr\n")
modelfile.write("      real(ki) :: value\n")
modelfile.write("\n")
modelfile.write("      read(line,*,iostat=ioerr) idx1, value\n")
modelfile.write("      if (ioerr .ne. 0) then\n")
modelfile.write("         if (present(ierr)) ierr = 1\n")
modelfile.write("         return\n")
modelfile.write("      end if\n")
modelfile.write("      select case(idx1)\n")
modelfile.write("      case(23)\n")
modelfile.write("         mdlMZ = value\n")
modelfile.write("      case(11)\n")
modelfile.write("         mdlMe = value\n")
modelfile.write("      case(13)\n")
modelfile.write("         mdlMMU = value\n")
modelfile.write("      case(15)\n")
modelfile.write("         mdlMTA = value\n")
modelfile.write("      case(6)\n")
modelfile.write("         mdlMT = value\n")
modelfile.write("      end select\n")
modelfile.write("      if (present(ierr)) ierr = 0\n")
modelfile.write("   end subroutine read_slha_block_mass\n")
modelfile.write("!---#] SLHA READER:\n")
modelfile.write("!---#[ subroutine set_parameter\n")
modelfile.write("   recursive subroutine set_parameter(name, re, im, ierr)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("      character(len=*), intent(in) :: name\n")
modelfile.write("      real(ki), intent(in) :: re, im\n")
modelfile.write("      integer, intent(out) :: ierr\n")
modelfile.write("\n")
modelfile.write("      integer :: err, pdg, nidx, idx\n")
modelfile.write("      complex(ki) :: tmp\n")
modelfile.write("\n")
modelfile.write("      logical :: must_be_real\n")
modelfile.write("      must_be_real = .false.\n")
modelfile.write("      ierr = 1 ! OK\n")
modelfile.write("\n")
modelfile.write("if (name(1:5).eq.\"mass(\" .and. len_trim(name)>=7) then\n")
modelfile.write("         idx = scan(name,\")\",.false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            idx=len_trim(name)+1\n")
modelfile.write("         end if\n")
modelfile.write("         read(name(6:idx-1),*, iostat=err) pdg\n")
modelfile.write("         if (err.ne.0) then\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         must_be_real = .true.\n")
modelfile.write("         select case(pdg)\n")

modelfile.write("            case(23)\n")
modelfile.write("               mdlMZ = re\n")
modelfile.write("            case(11)\n")
modelfile.write("               mdlMe = re\n")
modelfile.write("            case(13)\n")
modelfile.write("               mdlMMU = re\n")
modelfile.write("            case(15)\n")
modelfile.write("               mdlMTA = re\n")
modelfile.write("            case(6)\n")
modelfile.write("               mdlMT = re\n")
modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set mass for PDG code:\", pdg\n")
modelfile.write("               ierr = 0\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("     elseif (len_trim(name)>=8 .and. name(1:6).eq.\"width(\") then\n")
modelfile.write("         idx = scan(name,\")\",.false.)\n")
modelfile.write("         if (idx.eq.0) then\n")
modelfile.write("            idx=len_trim(name)+1\n")
modelfile.write("         end if\n")
modelfile.write("         read(name(7:idx-1),*, iostat=err) pdg\n")
modelfile.write("         if (err.ne.0) then\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         must_be_real = .true.\n")
modelfile.write("         select case(pdg)\n")

modelfile.write("            case default\n")
modelfile.write("               write(*,'(A20,1x,I10)') \"Cannot set width for PDG code:\", pdg\n")
modelfile.write("               ierr = 0 !FAIL\n")
modelfile.write("               return\n")
modelfile.write("            end select\n")
modelfile.write("     elseif (name .eq. \"SMINPUTS&&1\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlaEWM1 = re\n")
modelfile.write("     elseif (name .eq. \"SMINPUTS&&2\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlGf = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&1\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymdo = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&2\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymup = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&3\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlyms = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&4\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymc = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&5\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymb = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&6\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymt = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&11\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlyme = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&13\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymm = re\n")
modelfile.write("     elseif (name .eq. \"YUKAWA&&15\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlymtau = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&14\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlEFTcount = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&1\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlLambdam2 = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&2\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlct = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&3\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcgg = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&4\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcgghh = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&5\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcthh = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&6\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlchhh = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&7\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlchhhh = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&8\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcV = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&9\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcb = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&10\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlctau = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&11\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcgaga = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&12\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcZga = re\n")
modelfile.write("     elseif (name .eq. \"FRBLOCK&&13\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlcVhh = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&23\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlMZ = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&11\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlMe = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&13\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlMMU = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&15\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlMTA = re\n")
modelfile.write("     elseif (name .eq. \"MASS&&6\") then\n")
modelfile.write("               must_be_real = .true.\n")
modelfile.write("               mdlMT = re\n")
modelfile.write("      elseif (name .eq. \"renormalisation\") then\n")
modelfile.write("          if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("             renormalisation = int(re)\n")
modelfile.write("          else\n")
modelfile.write("             ierr=0 !FAIL\n")
modelfile.write("          end if\n")
modelfile.write("      elseif (name .eq. \"EFTcount\") then\n")
modelfile.write("          if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("             EFTcount = int(re)\n")
modelfile.write("          else\n")
modelfile.write("             ierr=0 !FAIL\n")
modelfile.write("          end if\n")
modelfile.write("      elseif (name .eq. \"nlo_prefactors\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            nlo_prefactors = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")
modelfile.write("      elseif (name .eq. \"deltaOS\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            deltaOS = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")
modelfile.write("      elseif (name .eq. \"reduction_interoperation\") then\n")
modelfile.write("         if ( real(int(re),ki) == re .and. im == 0.0_ki ) then\n")
modelfile.write("            reduction_interoperation = int(re)\n")
modelfile.write("         else\n")
modelfile.write("            ierr=0 !FAIL\n")
modelfile.write("         end if\n")

modelfile.write("     elseif (any(names .eq. name)) then\n")
modelfile.write("         do nidx=1,size(names)\n")
modelfile.write("            if (names(nidx) .eq. name) exit\n")
modelfile.write("         end do\n")
modelfile.write("         select case (nidx)\n")

modelfile.write("         case(1)\n")
modelfile.write("            gauge1z = ")

modelfile.write("cmplx(re, im, ki)\n")


modelfile.write("         case(2)\n")
modelfile.write("            gauge2z = ")

modelfile.write("cmplx(re, im, ki)\n")


modelfile.write("         case(3)\n")
modelfile.write("            mdlaEWM1 = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(4)\n")
modelfile.write("            mdlcb = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(5)\n")
modelfile.write("            mdlcgaga = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(6)\n")
modelfile.write("            mdlcgg = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(7)\n")
modelfile.write("            mdlcgghh = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(8)\n")
modelfile.write("            mdlchhh = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(9)\n")
modelfile.write("            mdlchhhh = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(10)\n")
modelfile.write("            mdlct = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(11)\n")
modelfile.write("            mdlctau = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(12)\n")
modelfile.write("            mdlcthh = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(13)\n")
modelfile.write("            mdlcV = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(14)\n")
modelfile.write("            mdlcVhh = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(15)\n")
modelfile.write("            mdlcZga = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(16)\n")
modelfile.write("            mdlEFTcount = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(17)\n")
modelfile.write("            mdlGf = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(18)\n")
modelfile.write("            mdlLambdam2 = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(19)\n")
modelfile.write("            mdlMe = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(20)\n")
modelfile.write("            mdlMMU = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(21)\n")
modelfile.write("            mdlMT = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(22)\n")
modelfile.write("            mdlMTA = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(23)\n")
modelfile.write("            mdlMZ = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(24)\n")
modelfile.write("            mdlymb = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(25)\n")
modelfile.write("            mdlymc = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(26)\n")
modelfile.write("            mdlymdo = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(27)\n")
modelfile.write("            mdlyme = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(28)\n")
modelfile.write("            mdlymm = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(29)\n")
modelfile.write("            mdlyms = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(30)\n")
modelfile.write("            mdlymt = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(31)\n")
modelfile.write("            mdlymtau = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(32)\n")
modelfile.write("            mdlymup = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(33)\n")
modelfile.write("            NC = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(34)\n")
modelfile.write("            Nf = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         case(35)\n")
modelfile.write("            Nfgen = ")

modelfile.write("re\n")

modelfile.write("            must_be_real=.true.\n")


modelfile.write("         end select\n")
modelfile.write("      elseif (name .eq. \"alpha\") then\n")
modelfile.write("            mdlaEWM1 = 1._ki/re\n")
modelfile.write("            must_be_real=.true.\n")
modelfile.write("      elseif (name .eq. \"alphaEW\") then\n")
modelfile.write("            mdlaEWM1 = 1._ki/re\n")
modelfile.write("            must_be_real=.true.\n")
modelfile.write("      elseif (name .eq. \"GF\") then\n")
modelfile.write("            mdlGf = re\n")
modelfile.write("            must_be_real=.true.\n")
modelfile.write("     else\n")
modelfile.write("         if (name(1:3) /= \"mdl\") then\n")
modelfile.write("            call set_parameter(\"mdl\" // name(4:),re,im,ierr)\n")
modelfile.write("            return\n")
modelfile.write("         end if\n")
modelfile.write("         ierr = 0 !FAIL / UNKNOWN\n")
modelfile.write("     end if\n")
modelfile.write("     if (must_be_real .and. im /= 0.0_ki .and. ierr.eq.1) then\n")
modelfile.write("        ierr = 0 ! FAIL\n")
modelfile.write("     end if\n")
modelfile.write("\n")

modelfile.write("\n")
modelfile.write("\n")
modelfile.write("     call init_functions()\n")
modelfile.write("      ! TODO init_color\n")
modelfile.write("   end subroutine\n")
modelfile.write("!---#] subroutine set_parameter\n")




modelfile.write("!---#[ subroutine init_functions:\n")
modelfile.write("   subroutine     init_functions()\n")
modelfile.write("      implicit none\n")
modelfile.write("      complex(ki), parameter :: i_ = (0.0_ki, 1.0_ki)\n")
modelfile.write("      real(ki), parameter :: pi = 3.14159265358979323846264&\n")
modelfile.write("     &3383279502884197169399375105820974944592307816406286209_ki\n")
modelfile.write("%s" % outdict['Functions'])
modelfile.write("end subroutine init_functions\n")
modelfile.write("!---#] subroutine init_functions:\n")
modelfile.write("!---#[ utility functions for model initialization:\n")
modelfile.write("   pure function ifpos(x0, x1, x2)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), intent(in) :: x0, x1, x2\n")
modelfile.write("      real(ki) :: ifpos\n")
modelfile.write("\n")
modelfile.write("      if (x0 > 0.0_ki) then\n")
modelfile.write("         ifpos = x1\n")
modelfile.write("      else\n")
modelfile.write("         ifpos = x2\n")
modelfile.write("      endif\n")
modelfile.write("   end  function ifpos\n")
modelfile.write("\n")
modelfile.write("   pure function sort4(m1, m2, m3, m4, n)\n")
modelfile.write("      implicit none\n")
modelfile.write("      real(ki), intent(in) :: m1, m2, m3, m4\n")
modelfile.write("      integer, intent(in) :: n\n")
modelfile.write("      real(ki) :: sort4\n")
modelfile.write("\n")
modelfile.write("      real(ki), dimension(4) :: m\n")
modelfile.write("      logical :: f\n")
modelfile.write("      integer :: i\n")
modelfile.write("      real(ki) :: tmp\n")
modelfile.write("\n")
modelfile.write("      m(1) = m1\n")
modelfile.write("      m(2) = m2\n")
modelfile.write("      m(3) = m3\n")
modelfile.write("      m(4) = m4\n")
modelfile.write("\n")
modelfile.write("      ! Bubble Sort\n")
modelfile.write("      do\n")
modelfile.write("         f = .false.\n")
modelfile.write("\n")
modelfile.write("         do i=1,3\n")
modelfile.write("            if (abs(m(i)) .gt. abs(m(i+1))) then\n")
modelfile.write("               tmp = m(i)\n")
modelfile.write("               m(i) = m(i+1)\n")
modelfile.write("               m(i+1) = tmp\n")
modelfile.write("               f = .true.\n")
modelfile.write("            end if\n")
modelfile.write("         end do\n")
modelfile.write("\n")
modelfile.write("         if (.not. f) exit\n")
modelfile.write("      end do\n")
modelfile.write("\n")
modelfile.write("      sort4 = m(n)\n")
modelfile.write("   end  function sort4\n")
modelfile.write("!---#] utility functions for model initialization:\n")


modelfile.write("end module pb0_gghh_model\n")

modelfile.close()
### additional formatting for output files

postformat('model.f90')



