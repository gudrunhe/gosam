module     analytic
   use precision_golem, only: ki_gol => ki
   use eett_config, only: ki
   use dilogarithme, only: zdilog
   implicit none
   private

   public :: reference_amp

   real(ki_gol), parameter :: Qq  =  2.0_ki/3.0_ki
   real(ki_gol), parameter :: T3q =  0.5_ki
   real(ki_gol), parameter :: Ql  = -1.0_ki
   real(ki_gol), parameter :: T3l = -0.5_ki
   real(ki_gol), parameter :: pi3 = &
    & 3.2898681336964528729448303332920503784378998024135968754711164580_ki

   logical, public :: include_Z = .true.

contains

function     reference_amp(vecs, scale2) result(xamp)
   use eett_model, only: mdlMtop, mdlMZ, mdlwZ, mdlSW, mdlCW, NC
   use form_factor_type, only: form_factor, operator(+), operator(*), &
       & operator(-), operator(/)
   use form_factor_3p, only: a30, a31, a32, b32
   use precision_golem, only: ki_gol => ki
   use matrice_s, only: allocation_s, deallocation_s, s_mat, set_ref, &
                      & s_mat_c, b_ref, preparesmatrix
   use parametre, only: rmass_or_cmass_par, cmass, mu2_scale_par
   use cache, only: allocate_cache, clear_cache, reset_cache
   use array, only: packb
   implicit none
   ! This routine implements equations (D.16)-(D.18) in
   ! Ref. [1] (see README).
   ! A factor of alpha_s/2/pi * (4 pi)^eps / Gamma(1-eps)
   ! has been factored out from the result

   integer, parameter :: pinches = 0
   real(ki_gol), parameter :: half = 0.5_ki_gol

   real(ki), parameter :: Qf  =  2.d0/3.d0
   real(ki), parameter :: Qe  = -1.d0
   real(ki), parameter :: I3f =  0.5d0
   real(ki), parameter :: I3e = -0.5d0

   real(ki), dimension(4,0:3), intent(in) :: vecs
   real(ki), intent(in) :: scale2
   real(ki), dimension(0:3) :: xamp
   complex(ki_gol) :: ampr
   real(ki_gol) :: prefactor0, prefactor1, amp0
   type(form_factor) :: amp

   real(ki_gol) :: s, t, rho, tau, CF, x
   real(ki_gol) :: gZ, gTv, gTa, gev, gea
   complex(ki_gol) :: PZ, PZc[%
@for symbols registers="T%s" %]
   [% type.repr %] :: [% $_ %][%
@end @for %]

   gZ = 1.0_ki / mdlSW / mdlCW
   gTv =  (I3f - 2.d0 * Qf * mdlSW**2) * 0.5d0 * gZ
   gTa =  I3f * 0.5d0 * gZ
   gev =  (I3e - 2.d0 * Qe * mdlSW**2) * 0.5d0 * gZ
   gea =  I3e * 0.5d0 * gZ

   s = sp(vecs(1,:)+vecs(2,:), vecs(1,:)+vecs(2,:))
   t = sp(vecs(2,:)-vecs(3,:), vecs(2,:)-vecs(3,:))
   rho = mdlMtop*mdlMtop/s
   tau = t/s

   CF = 4._ki_gol / 3._ki_gol

   if (include_Z) then
      PZ = s / cmplx(s - mdlMZ*mdlMZ, mdlMZ*mdlwZ, ki)
      PZc = conjg(PZ)
   else
      PZ = 0._ki_gol
      PZc = 0._ki_gol
   end if

   rmass_or_cmass_par = cmass
   call allocation_s(3)
   set_ref = (/1, 2, 3/)
   b_ref = packb(set_ref)
   call allocate_cache(3)
   s_mat => s_mat_c

   x = s/mdlMtop/mdlMtop - 2._ki_gol

   s_mat(1,:) = (/ -2._ki_gol,          x, 0._ki_gol /)
   s_mat(2,:) = (/          x, -2._ki_gol, 0._ki_gol /)
   s_mat(3,:) = (/  0._ki_gol,  0._ki_gol, 0._ki_gol /)
   s_mat(:,:) = mdlMtop*mdlMtop * s_mat(:,:)
   call preparesmatrix()

   mu2_scale_par = scale2[%
@for instructions registers="T%s" %]
   [% $_ %] = [% expression %][%
@end @for %]
   rmass_or_cmass_par = cmass
   nullify(s_mat)
   call deallocation_s()
   call clear_cache()
   xamp(0) = amp0
   ! The factor -1/2 in front of ampr
   ! is the value of the higher dim. triangle
   xamp(1) = 2.0_ki * real(amp%C - 0.5_ki * ampr, ki)
   xamp(2) = 2.0_ki * real(amp%B, ki)
   xamp(3) = 2.0_ki * real(amp%A, ki)
   ! Factor 1/2 from mismatch between integral measure and prefactor
   ! alpha_s/2pi
   xamp(1:3) = 0.5_ki * xamp(1:3)
end function reference_amp

pure function sp(vec1, vec2)
   implicit none
   real(ki), dimension(0:3), intent(in) :: vec1, vec2
   real(ki) :: sp

   sp = vec1(0)*vec2(0) - vec1(3)*vec2(3) &
      - vec1(1)*vec2(1) - vec1(2)*vec2(2)
end  function sp

end module analytic
