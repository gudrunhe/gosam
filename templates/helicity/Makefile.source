[%' vim: syntax=golem
	 This template defines the Makefile.source that go under
    <process_dir>/helicity*/
'%]# vim: ts=3:sw=3
[% @if internal OLP_MODE %]
include ../../Makefile.conf[%
@else %]
include ../Makefile.conf[%
@end @if %]


[% @for helicities var=test
	symbol_plus2=+2
	symbol_plus=+1
	symbol_minus=-1
	symbol_minus2=-2
	symbol_zero=0
%][%
  @if eval test .eq. helicity %]# @helicity: [%helicity%] [[%
  @for particles%] [% hel%][%@end @for%]]
# @date: [% time_stamp format=%x~%X %]
[%
   @for particles initial %]
HELi[%index%]=[%hel%][%
   @end @for%][%
   @for particles final %]
HELo[%out_index%]=[%hel%][%
   @end @for%]
[%@end @if %][% @end @for %]
# NOTE: reference vectors are no longer defined here but in the
#       setup file through the property reference-vectors.

FORM_OPT=[%
	@for particles initial %]-D HELi[%index%]=$(HELi[%index%]) \
	[%@end @for%][%
	@for particles final %]-D HELo[%out_index%]=$(HELo[%out_index%]) \
	[%@end @for%] -D PROCESSPATH=.. \
	-D PWD=. \
	-p ..:../codegen \
	-M -q

[% @if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
TXT_TREE[% efto %]=[%
   @for elements topolopy.keep.tree %] \
		d[%$_%]_[% efto %]h[%helicity%]l0.txt[%
   @end @for %][% 
   @end @for %][%
@else %]TXT_TREE=[%
   @for elements topolopy.keep.tree %] \
		d[%$_%]h[%helicity%]l0.txt[%
   @end @for %][%
@end @if %]
TXT_TREE_STAMP=[%
   @for elements topolopy.keep.tree %] \
		d[%$_%][% @if enable_truncation_orders %]_0h[%helicity%]l0-stamp \
		d[%$_%]_1h[%helicity%]l0-stamp \
		d[%$_%]_2[% @end @if %]h[%helicity%]l0-stamp[%
   @end @for %]

[% @if generate_lo_diagrams %]
SOURCE_TREE= \
	diagramsl0[% @if enable_truncation_orders %]_0.f90 diagramsl0_1.f90 diagramsl0_2[% @end @if %].f90 $(DIAGRAMS_TREE)[%
   @if internal REQUIRE_FR5 %] \
	diagramsl0[% @if enable_truncation_orders %]_0fr5.f90 diagramsl0_1fr5.f90 diagramsl0_2fr5[% @end @if %].f90 $(DIAGRAMS_TREE_FR5)[%
   @end @if %][%
   @if extension quadruple %] \
	diagramsl0[% @if enable_truncation_orders %]_0_qp.f90 \
	diagramsl0_1_qp.f90 \
	diagramsl0_2_qp[% @end @if %].f90[%
   @end @if %]
[% @else %]
SOURCE_TREE=
[% @end @if %]
[% @if generate_nlo_virt %]
DIAGRAMS_VIRT=[%
@if helsum %][%
   @for elements topolopy.keep.virt %] \
	d[%$_%][% @if enable_truncation_orders %]_0h[%helicity%]l1.prc \
	d[%$_%]_1h[%helicity%]l1.prc \
	d[%$_%]_2[% @end @if %]h[%helicity%]l1.prc \
	d[%$_%][% @if enable_truncation_orders %]_0h[%helicity%]l1d.prc \
	d[%$_%]_1h[%helicity%]l1d.prc \
	d[%$_%]_2[% @end @if %]h[%helicity%]l1d.prc[%
   @end @for %][%
@else %][%
   @for elements topolopy.keep.virt %][%
   @if enable_truncation_orders %][%
   @for each 0 1 2 var=efto %] \
	d[%$_%]_[% efto %]h[%helicity%]l1.f90[%
	   @if extension quadruple %] \
	d[%$_%]_[% efto %]h[%helicity%]l1_qp.f90[%
	   @end @if %] \
	d[%$_%]_[% efto %]h[%helicity%]l1d.f90[%
	   @if extension quadruple %] \
	d[%$_%]_[% efto %]h[%helicity%]l1d_qp.f90[%
	   @end @if %][%
   @if extension ninja %] \
        d[%$_%]_[% efto %]h[%helicity%]l131.f90 \
        d[%$_%]_[% efto %]h[%helicity%]l132.f90 \
        d[%$_%]_[% efto %]h[%helicity%]l121.f90[%
      @if extension quadruple %] \
        d[%$_%]_[% efto %]h[%helicity%]l131_qp.f90 \
        d[%$_%]_[% efto %]h[%helicity%]l132_qp.f90 \
        d[%$_%]_[% efto %]h[%helicity%]l121_qp.f90[%
      @end @if %][%
   @end @if %][%
   @end @for %][%
   @else %] \
	d[%$_%]h[%helicity%]l1.f90[%
	   @if extension quadruple %] \
	d[%$_%]h[%helicity%]l1_qp.f90[%
	   @end @if %] \
	d[%$_%]h[%helicity%]l1d.f90[%
	   @if extension quadruple %] \
	d[%$_%]h[%helicity%]l1d_qp.f90[%
	   @end @if %][%
   @if extension ninja %] \
        d[%$_%]h[%helicity%]l131.f90 \
        d[%$_%]h[%helicity%]l132.f90 \
        d[%$_%]h[%helicity%]l121.f90[%
      @if extension quadruple %] \
        d[%$_%]h[%helicity%]l131_qp.f90 \
        d[%$_%]h[%helicity%]l132_qp.f90 \
        d[%$_%]h[%helicity%]l121_qp.f90[%
      @end @if %][%
   @end @if %][%
   @end @if %][%
   @end @for %][%
@end @if %]

TXT_VIRT=$(subst .f90,.txt,$(DIAGRAMS_VIRT))

ABB_VIRT=[%
@if helsum %][%
@else %][%
      @for elements topolopy.keep.virt %] \
	abbrevd[%$_%][% @if enable_truncation_orders %]_0h[%helicity%].f90 abbrevd[%$_%]_1h[%helicity%].f90 abbrevd[%$_%]_2[% @end @if %]h[%helicity%].f90[%
      @end @for %][%
  @if extension quadruple %][%
      @for elements topolopy.keep.virt %] \
	abbrevd[%$_%][% @if enable_truncation_orders %]_0h[%helicity%]_qp.f90 abbrevd[%$_%]_1h[%helicity%]_qp.f90 abbrevd[%$_%]_2[% @end @if %]h[%helicity%]_qp.f90[%
      @end @for %][%
 @end @if extension quadruple %][%
@end @if helsum %]
SOURCE_VIRT=$(ABB_VIRT) $(DIAGRAMS_VIRT)
[% @else %]
DIAGRAMS_VIRT=
TXT_VIRT=
SOURCE_VIRT=
[% @end @if generate_nlo_virt %]
[% @if generate_eft_counterterms %][%
@if eval topolopy.count.ct .gt. 0 %]

[% @if enable_truncation_orders %][%
@for each 0 1 2 var=efto
%]TXT_EFTCT[% efto %]=[%
   @for elements topolopy.keep.ct %] \
		d[%$_%]_[% efto %]h[%helicity%]ct.txt[%
   @end @for %]
[% @end @for %][%
@else %]TXT_EFTCT=[%
   @for elements topolopy.keep.ct %] \
		d[%$_%]h[%helicity%]ct.txt[%
   @end @for %][%
@end @if %]

TXT_EFTCT_STAMP=[%
   @for elements topolopy.keep.ct %] \
		d[%$_%][% @if enable_truncation_orders %]_0h[%helicity%]ct-stamp \
		d[%$_%]_1h[%helicity%]ct-stamp \
		d[%$_%]_2[% @end @if %]h[%helicity%]ct-stamp[%
   @end @for %]

SOURCE_EFTCT= \
	diagramsct[% @if enable_truncation_orders %]_0.f90 diagramsct_1.f90 diagramsct_2[% @end @if %].f90 $(DIAGRAMS_EFTCT)[%
   @if internal REQUIRE_FR5 %] \
	diagramsct[% @if enable_truncation_orders %]_0fr5.f90 diagramsct_1fr5.f90 diagramsct_2fr5[% @end @if %].f90 $(DIAGRAMS_EFTCT_FR5)[%
   @end @if %][%
   @if extension quadruple %] \
	diagramsct[% @if enable_truncation_orders %]_0_qp.f90 \
	diagramsct_1_qp.f90 \
	diagramsct_2_qp[% @end @if %].f90[%
   @end @if %]
[% @else %][% ' no CT diagram left after filters %]
DIAGRAMS_EFTCT=
TXT_EFTCT=
SOURCE_EFTCT=
[% @end @if %][%
@else %][% ' do not generate_eft_counterterms %]
DIAGRAMS_EFTCT=
TXT_EFTCT=
SOURCE_EFTCT=
[% @end @if generate_eft_counterterms %]

.PHONY: source
.SUFFIXES:

all_source: $(SOURCE_TREE) $(SOURCE_VIRT) $(SOURCE_EFTCT)[%
@for elements topolopy.keep.tree %][%
@if is_first %][% @if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]l0.txt:
	   @echo "* dummy file" > $@
born_[% efto %].txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=2 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l0 \
		../codegen/golem_[% efto %].frm
	@touch born_[% efto %]-stamp[%
@end @for %][%
@else %]
d[%$_%]h[%helicity%]l0.txt:
	   @echo "* dummy file" > $@
born.txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=2 \
		-D OUTFILE=d[%$_%]h[%helicity%]l0 \
		../codegen/golem.frm
	@touch born-stamp[%
@end @if %][%
@else %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]l0.txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=1 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l0 \
		../codegen/golem_[% efto %].frm
	@touch d[%$_%]_[% efto %]h[%helicity%]l0-stamp
d[%$_%]_[% efto %]h[%helicity%]l0-stamp: d[%$_%]_[% efto %]h[%helicity%]l0.txt[%
@end @for %][%
@else %]
d[%$_%]h[%helicity%]l0.txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=1 \
		-D OUTFILE=d[%$_%]h[%helicity%]l0 \
		../codegen/golem.frm
	@touch d[%$_%]h[%helicity%]l0-stamp
d[%$_%]h[%helicity%]l0-stamp: d[%$_%]h[%helicity%]l0.txt[%
@end @if %][%
@end @if %][%
@else %][%
@if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]l0.txt:
	@echo "* dummy file" > $@
	@touch d[%$_%]_[% efto %]h[%helicity%]l0-stamp
d[%$_%]_[% efto %]h[%helicity%]l0-stamp: d[%$_%]_[% efto %]h[%helicity%]l0.txt
born_[% efto %].txt: ../diagrams-0.hh $(TXT_TREE_STAMP)
	@cat $(TXT_TREE[% efto %]) > borndiag[% efto %].prc
	@echo Form is processing tree diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=-1 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l0 \
		../codegen/golem_[% efto %].frm
	@touch born_[% efto %]-stamp[%
@end @for %][%
@else %]
d[%$_%]h[%helicity%]l0.txt:
	@echo "* dummy file" > $@
	@touch d[%$_%]h[%helicity%]l0-stamp
d[%$_%]h[%helicity%]l0-stamp: d[%$_%]h[%helicity%]l0.txt
born.txt: ../diagrams-0.hh $(TXT_TREE_STAMP)
	@cat $(TXT_TREE) > borndiag.prc
	@echo Form is processing tree diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=-1 \
		-D OUTFILE=d[%$_%]h[%helicity%]l0 \
		../codegen/golem.frm
	@touch born-stamp[%
@end @if %][%
@else %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]l0.txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=0 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l0 \
		../codegen/golem_[% efto %].frm
	@touch d[%$_%]_[% efto %]h[%helicity%]l0-stamp
d[%$_%]_[% efto %]h[%helicity%]l0-stamp: d[%$_%]_[% efto %]h[%helicity%]l0.txt[%
@end @for %][%
@else %]
d[%$_%]h[%helicity%]l0.txt: ../diagrams-0.hh
	@echo Form is processing tree diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D BORNFLG=0 \
		-D OUTFILE=d[%$_%]h[%helicity%]l0 \
		../codegen/golem.frm
	@touch d[%$_%]h[%helicity%]l0-stamp
d[%$_%]h[%helicity%]l0-stamp: d[%$_%]h[%helicity%]l0.txt[%
@end @if %][%
@end @if %][% @end @if %][%
@end @for %][%
@for elements topolopy.keep.tree %][% @if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
born_[% efto %]-stamp: born_[% efto %].txt
diagramsl0_[% efto %].f90[% @if extension quadruple %] diagramsl0_[% efto %]_qp.f90[% @end @if %]: born_[% efto %].txt born_[% efto %]-stamp
	@echo Python is processing tree diagrams @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortranborn_[% efto %].py \
		-i $< \
		--HELICITY=[%helicity%][%
@end @for %][%
@else %]
born-stamp: born.txt
diagramsl0.f90[% @if extension quadruple %] diagramsl0_qp.f90[% @end @if %]: born.txt born-stamp
	@echo Python is processing tree diagrams @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortranborn.py \
		-i $< \
		--HELICITY=[%helicity%][%
@end @if %][%
@end @if %][% @end @for %]

[%
@if generate_nlo_virt %][%
   @for groups var=grp rank=grank %][%
	   @for diagrams group=grp %]
[% @if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]l1.prc : d[%$_%]_[% efto %]h[%helicity%]l1.txt
d[%$_%]_[% efto %]h[%helicity%]l1.txt: ../diagrams-1.hh
	@echo Form is processing loop diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS)[%
	      @if is_mqse %] \
		-D MQSE=1[%
			@end @if %] \
		-D LOOPS=1 \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D GROUP=0 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D GENERATEDERIVATIVES=1 \
		-D DERIVATIVESATZERO=1[%
			@if is_massive_bubble diagram=$_ %] \
		-D "MASSIVEBUBBLE=[% massive_bubble_args diagram=$_ %]"[%
			@end @if %][%
                @if helsum %] \
		../codegen/golem_[% efto %].frm[%
                @else %][%
			@if internal GENERATE_NINJA_TRIPLE %] \
		-D GENERATENINJATRIPLE=1[%
			@end @if %][%
			@if internal GENERATE_NINJA_DOUBLE %] \
		-D GENERATENINJADOUBLE=1[%
			@end @if %] \
		../codegen/golem_[% efto %].frm
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rank %] \
		-D DERIVATIVESATZERO=1 \
		../codegen/finaloptimization.frm[%
                @end @if helsum %]
	@touch d[%$_%]_[% efto %]h[%helicity%]l1-stamp
d[%$_%]_[% efto %]h[%helicity%]l1-stamp: d[%$_%]_[% efto %]h[%helicity%]l1.txt
d[%$_%]_[% efto %]h[%helicity %]l1d.[% @if helsum %]prc[% @else %]txt[% @end @if %]: d[%$_%]_[% efto %]h[%helicity %]l1.txt d[%$_%]_[% efto %]h[%helicity%]l1-stamp
	@echo Form is generating loop diagram derivatives [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rank %] \
		-D DERIVATIVESATZERO=1[%
                        @if helsum %] \
                -D OUTSUFFIX=prc[%
                        @else %] \
                -D OUTSUFFIX=hh[%
                        @end @if %]\
		../codegen/derive.frm[%
@if helsum %][%
@else %][%
   @for repeat rank inclusive=true var=rk %]
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] rank [%rk%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rk %] \
		-D GENERATEDERIVATIVES=1 \
		../codegen/finaloptimization.frm[%
	@end @for%]
d[%$_%]_[% efto %]h[%helicity%]l1.f90[% @if extension quadruple %] d[%$_%]_[% efto %]h[%helicity%]l1_qp.f90[% @end @if %]: d[%$_%]_[% efto %]h[%helicity%]l1.txt d[%$_%]_[% efto %]h[%helicity%]l1-stamp
	@echo Python is processing loop diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_[% efto %].py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[% sign %] \
		--QSHIFT=[%shift%]
abbrevd[%$_%]_[% efto %]h[%helicity%].f90: d[%$_%]_[% efto %]h[%helicity%]l1.f90[%
@if extension quadruple %]
abbrevd[%$_%]_[% efto %]h[%helicity%]_qp.f90: d[%$_%]_[% efto %]h[%helicity%]l1_qp.f90[%
@end @if %][%
@end @if helsum %]
d[%$_%]_[% efto %]h[%helicity %]l1d-stamp: d[%$_%]_[% efto %]h[%helicity%]l1d.txt
	@touch d[%$_%]_[% efto %]h[%helicity %]l1d-stamp
d[%$_%]_[% efto %]h[%helicity%]l1d.f90[% @if extension quadruple %] d[%$_%]_[% efto %]h[%helicity%]l1d_qp.f90[% @end @if %]: d[%$_%]_[% efto %]h[%helicity%]l1d.txt d[%$_%]_[% efto %]h[%helicity %]l1d-stamp
	@echo Python is processing derivative [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_[% efto %]_d.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %][%		
@if extension ninja %][%
@if helsum %][%
@else %]
d[%$_%]_[% efto %]h[%helicity %]l14.txt : d[%$_%]_[% efto %]h[%helicity %]l1.txt d[%$_%]_[% efto %]h[%helicity %]l1d-stamp
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] for ninja @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		../codegen/ninja.frm
	@: > d[%$_%]_[% efto %]h[%helicity%]l13.txt # makes sure the file is always created
	@: > d[%$_%]_[% efto %]h[%helicity%]l12.txt # makes sure the file is always created
	@: > d[%$_%]_[% efto %]h[%helicity%]l1mu2.txt # makes sure the file is always created
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] laurent index 31 for triangles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=3 \
		-D EXPANSIONID=31 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] laurent index 32 for triangles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=3 \
		-D EXPANSIONID=32 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] laurent index 21 for bubbles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=2 \
		-D EXPANSIONID=21 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] laurent index 22 for bubbles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=2 \
		-D EXPANSIONID=22 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%]_[% efto %] mu expansion for boxes @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=4 \
		-D EXPANSIONID=Mu2 \
		../codegen/ninjafinalopt.frm
		@touch d[%$_%]_[% efto %]h[%helicity%]l13-stamp d[%$_%]_[% efto %]h[%helicity%]l12-stamp  d[%$_%]_[% efto %]h[%helicity%]l14-stamp

d[%$_%]_[% efto %]h[%helicity %]l13.txt d[%$_%]_[% efto %]h[%helicity %]l12.txt : d[%$_%]_[% efto %]h[%helicity%]l14-stamp
d[%$_%]_[% efto %]h[%helicity%]l13-stamp d[%$_%]_[% efto %]h[%helicity%]l12-stamp  d[%$_%]_[% efto %]h[%helicity%]l14-stamp: d[%$_%]_[% efto %]h[%helicity %]l14.txt
d[%$_%]_[% efto %]h[%helicity%]l131.f90[% @if extension quadruple %] d[%$_%]_[% efto %]h[%helicity%]l131_qp.f90[% @end @if %]: d[%$_%]_[% efto %]h[%helicity%]l13.txt d[%$_%]_[% efto %]h[%helicity%]l13-stamp
	@echo Python is processing ninja triangles expansion [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_[% efto %]_tn3.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %]
d[%$_%]_[% efto %]h[%helicity%]l132.f90[% @if extension quadruple %] d[%$_%]_[% efto %]h[%helicity%]l132_qp.f90[% @end @if %]: d[%$_%]_[% efto %]h[%helicity%]l12.txt d[%$_%]_[% efto %]h[%helicity%]l12-stamp
	@echo Python is processing ninja bubbles expansion [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_[% efto %]_tn2.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %]
d[%$_%]_[% efto %]h[%helicity%]l121.f90[% @if extension quadruple %] d[%$_%]_[% efto %]h[%helicity%]l121_qp.f90[% @end @if %]: d[%$_%]_[% efto %]h[%helicity%]l14.txt d[%$_%]_[% efto %]h[%helicity%]l14-stamp
	@echo Python is processing ninja mu expansion [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_[% efto %]_tmu.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %][%
		@end @if helsum %][%
        @end @if ninja %]
[% @end @for %]
[% @else %][% ' no enable_truncation_orders %]

d[%$_%]h[%helicity%]l1.prc : d[%$_%]h[%helicity%]l1.txt
d[%$_%]h[%helicity%]l1.txt: ../diagrams-1.hh
	@echo Form is processing loop diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS)[%
	      @if is_mqse %] \
		-D MQSE=1[%
			@end @if %] \
		-D LOOPS=1 \[%
@if generate_eft_counterterms %]
		-D EFTCTFLG=0 \[%
@end @if %]
		-D GROUP=0 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D GENERATEDERIVATIVES=1 \
		-D DERIVATIVESATZERO=1[%
			@if is_massive_bubble diagram=$_ %] \
		-D "MASSIVEBUBBLE=[% massive_bubble_args diagram=$_ %]"[%
			@end @if %][%
                @if helsum %] \
		../codegen/golem.frm[%
                @else %][%
			@if internal GENERATE_NINJA_TRIPLE %] \
		-D GENERATENINJATRIPLE=1[%
			@end @if %][%
			@if internal GENERATE_NINJA_DOUBLE %] \
		-D GENERATENINJADOUBLE=1[%
			@end @if %] \
		../codegen/golem.frm
	@echo Form is optimizing loop diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rank %] \
		-D DERIVATIVESATZERO=1 \
		../codegen/finaloptimization.frm[%
                @end @if helsum %]
	@touch d[%$_%]h[%helicity%]l1-stamp
d[%$_%]h[%helicity%]l1-stamp: d[%$_%]h[%helicity%]l1.txt
d[%$_%]h[%helicity %]l1d.[% @if helsum %]prc[% @else %]txt[% @end @if %]: d[%$_%]h[%helicity %]l1.txt d[%$_%]h[%helicity%]l1-stamp
	@echo Form is generating loop diagram derivatives [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rank %] \
		-D DERIVATIVESATZERO=1[%
                        @if helsum %] \
                -D OUTSUFFIX=prc[%
                        @else %] \
                -D OUTSUFFIX=hh[%
                        @end @if %]\
		../codegen/derive.frm[%
@if helsum %][%
@else %][%
   @for repeat rank inclusive=true var=rk %]
	@echo Form is optimizing loop diagram [%$_%] rank [%rk%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D RANK=[% rk %] \
		-D GENERATEDERIVATIVES=1 \
		../codegen/finaloptimization.frm[%
	@end @for%]
d[%$_%]h[%helicity%]l1.f90[% @if extension quadruple %] d[%$_%]h[%helicity%]l1_qp.f90[% @end @if %]: d[%$_%]h[%helicity%]l1.txt d[%$_%]h[%helicity%]l1-stamp
	@echo Python is processing loop diagram [%$_%] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[% sign %] \
		--QSHIFT=[%shift%]
abbrevd[%$_%]h[%helicity%].f90: d[%$_%]h[%helicity%]l1.f90[%
@if extension quadruple %]
abbrevd[%$_%]h[%helicity%]_qp.f90: d[%$_%]h[%helicity%]l1_qp.f90[%
@end @if %][%
@end @if helsum %]
d[%$_%]h[%helicity %]l1d-stamp: d[%$_%]h[%helicity%]l1d.txt
	@touch d[%$_%]h[%helicity %]l1d-stamp
d[%$_%]h[%helicity%]l1d.f90[% @if extension quadruple %] d[%$_%]h[%helicity%]l1d_qp.f90[% @end @if %]: d[%$_%]h[%helicity%]l1d.txt d[%$_%]h[%helicity %]l1d-stamp
	@echo Python is processing derivative [%$_%] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_d.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %][%		
@if extension ninja %][%
@if helsum %][%
@else %]
d[%$_%]h[%helicity %]l14.txt : d[%$_%]h[%helicity %]l1.txt d[%$_%]h[%helicity %]l1d-stamp
	@echo Form is optimizing loop diagram [%$_%] for ninja @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		../codegen/ninja.frm
	@: > d[%$_%]h[%helicity%]l13.txt # makes sure the file is always created
	@: > d[%$_%]h[%helicity%]l12.txt # makes sure the file is always created
	@: > d[%$_%]h[%helicity%]l1mu2.txt # makes sure the file is always created
	@echo Form is optimizing loop diagram [%$_%] laurent index 31 for triangles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=3 \
		-D EXPANSIONID=31 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%] laurent index 32 for triangles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=3 \
		-D EXPANSIONID=32 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%] laurent index 21 for bubbles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=2 \
		-D EXPANSIONID=21 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%] laurent index 22 for bubbles @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=2 \
		-D EXPANSIONID=22 \
		../codegen/ninjafinalopt.frm
	@echo Form is optimizing loop diagram [%$_%] mu expansion for boxes @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-D OUTFILE=d[%$_%]h[%helicity%]l1 \
		-D DIAG=[%$_%] \
		-D LOOPSIZE=[% loopsize diagram=$_ %] \
		-D RANK=[% rank %] \
		-D GLOOPSIZE=[% loopsize group=grp %] \
		-D GRANK=[% grank %] \
		-D EXPANSIONCUT=4 \
		-D EXPANSIONID=Mu2 \
		../codegen/ninjafinalopt.frm
		@touch d[%$_%]h[%helicity%]l13-stamp d[%$_%]h[%helicity%]l12-stamp  d[%$_%]h[%helicity%]l14-stamp

d[%$_%]h[%helicity %]l13.txt d[%$_%]h[%helicity %]l12.txt : d[%$_%]h[%helicity%]l14-stamp
d[%$_%]h[%helicity%]l13-stamp d[%$_%]h[%helicity%]l12-stamp  d[%$_%]h[%helicity%]l14-stamp: d[%$_%]h[%helicity %]l14.txt
d[%$_%]h[%helicity%]l131.f90[% @if extension quadruple %] d[%$_%]h[%helicity%]l131_qp.f90[% @end @if %]: d[%$_%]h[%helicity%]l13.txt d[%$_%]h[%helicity%]l13-stamp
	@echo Python is processing ninja triangles expansion [%$_%] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_tn3.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %]
d[%$_%]h[%helicity%]l132.f90[% @if extension quadruple %] d[%$_%]h[%helicity%]l132_qp.f90[% @end @if %]: d[%$_%]h[%helicity%]l12.txt d[%$_%]h[%helicity%]l12-stamp
	@echo Python is processing ninja bubbles expansion [%$_%] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_tn2.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %]
d[%$_%]h[%helicity%]l121.f90[% @if extension quadruple %] d[%$_%]h[%helicity%]l121_qp.f90[% @end @if %]: d[%$_%]h[%helicity%]l14.txt d[%$_%]h[%helicity%]l14-stamp
	@echo Python is processing ninja mu expansion [%$_%] @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortran_tmu.py \
		-i $< \
		--DIAGRAM=[%$_%] \
		--GROUP=[%grp%]  \
		--HELICITY=[%helicity%] \
		--QSIGN=[%sign%] \
		--QSHIFT=[%shift%] \
		--RANK=[%rank%] \
		--LOOPSIZE=[% loopsize diagram=$_ %][%
		@end @if helsum %][%
        @end @if ninja %][% 
	@end @if enable_truncation_orders  %][%
@end @for diagrams %][%
@end @for groups %][%
@end @if generate_nlo_virt %]

[% @if generate_eft_counterterms %][%
@for elements topolopy.keep.ct %][%
@if is_first %][% @if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]ct.txt:
	   @echo "* dummy file" > $@
eft_ct_[% efto %].txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=2 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]ct \
		../codegen/golem_[% efto %].frm
	@touch eft_ct_[% efto %]-stamp[%
@end @for %][%
@else %][% ' no truncation orders enabled %]
d[%$_%]h[%helicity%]ct.txt:
	   @echo "* dummy file" > $@
eft_ct.txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=2 \
		-D OUTFILE=d[%$_%]h[%helicity%]ct \
		../codegen/golem.frm
	@touch eft_ct-stamp[%
@end @if enable_truncation_orders %][%
@else %][% ' else case of is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]ct.txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=1 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]ct \
		../codegen/golem_[% efto %].frm
	@touch d[%$_%]_[% efto %]h[%helicity%]ct-stamp
d[%$_%]_[% efto %]h[%helicity%]ct-stamp: d[%$_%]_[% efto %]h[%helicity%]ct.txt[%
@end @for %][%
@else %][% ' no truncation orders enabled %]
d[%$_%]h[%helicity%]ct.txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=1 \
		-D OUTFILE=d[%$_%]h[%helicity%]ct \
		../codegen/golem.frm
	@touch d[%$_%]h[%helicity%]ct-stamp
d[%$_%]h[%helicity%]ct-stamp: d[%$_%]h[%helicity%]ct.txt[%
@end @if enable_truncation_orders %][%
@end @if is_last %][%
@else %][% ' else case of is_first %][%
@if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]ct.txt:
	@echo "* dummy file" > $@
	@touch d[%$_%]_[% efto %]h[%helicity%]ct-stamp
d[%$_%]_[% efto %]h[%helicity%]ct-stamp: d[%$_%]_[% efto %]h[%helicity%]ct.txt
eft_ct_[% efto %].txt: ../diagrams-ct.hh $(TXT_EFTCT_STAMP)
	@cat $(TXT_EFTCT[% efto %]) > eftctdiag[% efto %].prc
	@echo Form is processing counterterm diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=-1 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]ct \
		../codegen/golem_[% efto %].frm
	@touch eft_ct_[% efto %]-stamp[%
@end @for %][%
@else %][% ' no truncation orders enabled %]
d[%$_%]h[%helicity%]ct.txt:
	@echo "* dummy file" > $@
	@touch d[%$_%]h[%helicity%]ct-stamp
d[%$_%]h[%helicity%]ct-stamp: d[%$_%]h[%helicity%]ct.txt
eft_ct.txt: ../diagrams-ct.hh $(TXT_EFTCT_STAMP)
	@cat $(TXT_EFTCT) > eftctdiag.prc
	@echo Form is processing counterterm diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=-1 \
		-D OUTFILE=d[%$_%]h[%helicity%]ct \
		../codegen/golem.frm
	@touch eft_ct-stamp[%
@end @if enable_truncation_orders %][%
@else %][% ' else case of is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
d[%$_%]_[% efto %]h[%helicity%]ct.txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%]_[% efto %] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=0 \
		-D OUTFILE=d[%$_%]_[% efto %]h[%helicity%]ct \
		../codegen/golem_[% efto %].frm
	@touch d[%$_%]_[% efto %]h[%helicity%]ct-stamp
d[%$_%]_[% efto %]h[%helicity%]ct-stamp: d[%$_%]_[% efto %]h[%helicity%]ct.txt[%
@end @for %][%
@else %][% ' no truncation orders enabled %]
d[%$_%]h[%helicity%]ct.txt: ../diagrams-ct.hh
	@echo Form is processing counterterm diagram [%$_%] @ Helicity [%helicity%]
	@$(FORM) $(FORM_OPT) \
		-w$(FORM_THREADS) \
		-D GROUP=1 \
		-D LOOPS=0 \
		-D DIAG=[%$_%] \
		-D EFTCTFLG=1 \
		-D BORNFLG=0 \
		-D OUTFILE=d[%$_%]h[%helicity%]ct \
		../codegen/golem.frm
	@touch d[%$_%]h[%helicity%]ct-stamp
d[%$_%]h[%helicity%]ct-stamp: d[%$_%]h[%helicity%]ct.txt[%
@end @if enable_truncation_orders %][%
@end @if is_last %][% @end @if is_first %][%
@end @for elements topolopy.keep.ct %][%
@for elements topolopy.keep.ct %][% @if is_last %][%
@if enable_truncation_orders %][%
@for each 0 1 2 var=efto %]
eft_ct_[% efto %]-stamp: eft_ct_[% efto %].txt
diagramsct_[% efto %].f90[% @if extension quadruple %] diagramsct_[% efto %]_qp.f90[% @end @if %]: eft_ct_[% efto %].txt eft_ct_[% efto %]-stamp
	@echo Python is processing counterterm diagrams @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortraneftct_[% efto %].py \
		-i $< \
		--HELICITY=[%helicity%][%
@end @for %][%
@else %][% ' no truncation orders enabled %]
eft_ct-stamp: eft_ct.txt
diagramsct.f90[% @if extension quadruple %] diagramsct_qp.f90[% @end @if %]: eft_ct.txt eft_ct-stamp
	@echo Python is processing counterterm diagrams @ Helicity [%helicity%]
	@$(PYTHON) ../codegen/buildfortraneftct.py \
		-i $< \
		--HELICITY=[%helicity%][%
@end @if enable_truncation_orders %][%
@end @if is_last %][% @end @for elements topolopy.keep.ct %][%
@end @if generate_eft_counterterms %]

[% @if write_vanishing_amplitude %] 
born.txt: 
	@printf "#####Abbreviations\n\n\n#####Diagrams\namplitude =  0;" > born.txt
	@echo "abbrev_terms=0" > born.dat
	@touch born-stamp 
born-stamp: born.txt 
diagramsl0.f90[% @if extension quadruple %] diagramsl0_qp.f90[% @end @if %]: born.txt born-stamp 
	@echo Python is processing tree diagrams @ Helicity [%helicity%] 
	@$(PYTHON) ../codegen/buildfortranborn.py \ 
		-i $< \ 
		--HELICITY=[%helicity%][% 
@end @if %]

