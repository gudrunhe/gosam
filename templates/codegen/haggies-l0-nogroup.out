%=$[% ' vim: syntax=golem
%]module     [$ process_name asprefix=\_
	$][% output.file match=".*/(d\\d+h\\d+l0[fr5]*).f90" format ="%s"%]
   ! file:      [% output.file %]
   ! generator: [% program.name %] ([% program.version %])
   use [% @if internal OLP_MODE %][% @else %][% process_name%]_[% @end @if %]config, only: ki
   [$ @if internal CUSTOM_SPIN2_PROP
   $]use custompropagator[$ @end @if $]
implicit none

   private

   complex(ki), parameter :: i_ = (0.0_ki, 1.0_ki)

   public :: [% output.file
      match=".*/d(\\d+)h\\d+l0[fr5]*.f90" format ="diagram%s" %][%
      @for instructions registers="t%d" %][%
         @select $_ match="(.).*" format="%s"
         @case E %]
   complex(ki), private :: [% $_ %][%
         @end @select %][%
      @end @for instructions %]
contains
   function     [% output.file
      match=".*/d(\\d+)h\\d+l0[fr5]*.f90" format ="diagram%s"
   %]() result(diagram)
      use [% @if internal OLP_MODE %][% @else %][% process_name%]_[% @end @if %]model
      use [$ process_name asprefix=\_ $]kinematics
      use SpinorBrackets
      use [$ process_name asprefix=\_ $]color
      implicit none
      complex(ki), dimension(numcs) :: diagram[%
      @for symbols registers="t%d" %]
      [% type.repr %] :: [% $_  %][%
      @end @for %]
      diagram(:) = (0.0_ki, 0.0_ki)[%
      @for instructions registers="t%d" %]
      [% @select $_ match="(.).*" format="%s"
         @case d %]diagram[%
         @else %][% $_ %][%
         @end @select %] = [% expression  %][%
      @end @for instructions %]
   end function     [% output.file
      match=".*/d(\\d+)h\\d+l0[fr5]*.f90" format ="diagram%s" %]
end module [$ process_name asprefix=\_
	$][% output.file match=".*/(d\\d+h\\d+l0[fr5]*).f90" format ="%s"%]
