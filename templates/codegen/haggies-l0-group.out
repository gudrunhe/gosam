%=$[% ' vim: syntax=golem
%][% @with args prefix="arg."
%]module     [$ process_name asprefix=\_ $]diagramsh[%arg.helicity%]l0[%
      arg.modsuffix %]
   ! file:      [% output.file %]
   ! generator: [% program.name %] ([% program.version %])
   use [$ process_name asprefix=\_ $]color, only: numcs
   use config, only: ki
   [$ @if internal CUSTOM_SPIN2_PROP
   $]use custompropagator[$ @end @if $]
   implicit none

   private

   complex(ki), parameter :: i_ = (0.0_ki, 1.0_ki)
   complex(ki), dimension(numcs), parameter :: zero_col = 0.0_ki

   public :: amplitude

contains
   function     amplitude()
      use model
      use [$ process_name asprefix=\_ $]kinematics
      use SpinorBrackets
      use [$ process_name asprefix=\_ $]color
      use config, only: debug_lo_diagrams, &
        & use_sorted_sum
      use [$ process_name asprefix=\_ $]accu, only: sorted_sum
      use [$ process_name asprefix=\_ $]util, only: inspect_lo_diagram[$
   @if use_flags_0 $]
      use [$ process_name asprefix=\_ $]groups, only: evaluate_lo_diagram[$
   @end @if $]
      implicit none
      complex(ki), dimension(numcs) :: amplitude
      complex(ki), dimension([$ topolopy.count.tree $],numcs) :: diagrams
      integer :: i[%
      @for symbols registers="t%s" %]
      [%    type.repr %] :: [% $_ %][%
      @end @for %]
      diagrams(:,:) = (0.0_ki, 0.0_ki)[%
      @for instructions registers="t%s" %]
      [% @select $_ @case FOO %][% [$
         @for elements topolopy.keep.tree shift=1 $]
         @case d[$ $_ $] %][$
            @if use_flags_0 $]if(evaluate_lo_diagram([$ index $])) &
      & [$
            @end @if $]diagrams([$ index $], :) = [$
            @select tree_sign $_ @case - -1 $]-([%
                      expression %])[$
            @else $][% expression %][$
            @end @select $][% [$
         @end @for $]
         @else %][% $_ %] = [% expression %][%
         @end @select %][%
      @end @for instructions%]
      if (debug_lo_diagrams) then[$
      @for elements topolopy.keep.tree shift=1 $]
         [$
         @if use_flags_0 $]if (evaluate_lo_diagram([$ index $])) &
         & [$
         @end @if $]call inspect_lo_diagram(diagrams([$ 
               index $],:), [$ $_ $], [%
               arg.helicity %], 19)[$
      @end @for $]
      end if

      if (use_sorted_sum) then
         do i=1,numcs
            amplitude(i) = sorted_sum(diagrams(:,i))
         end do
      else
         do i=1,numcs
            amplitude(i) = sum(diagrams(:,i))
         end do
      end if
   end function     amplitude
end module [$ process_name asprefix=\_ $]diagramsh[%arg.helicity%]l0[%
      arg.modsuffix %][%
@end @with args %]
