%=$module     [$ process_name asprefix=\_ $]color
   ! file:      [% output.file %]
   ! generator: [% program.name %] ([% program.version %])
   use [% @if internal OLP_MODE %][% @else %][% process_name%]_[% @end @if %]config, only: ki
   use [% @if internal OLP_MODE %][% @else %][% process_name%]_[% @end @if %]model, only: NC, Nf
   implicit none
   save

   private :: ki, NC, Nf

   real(ki), parameter :: TR = 0.5_ki

   complex(ki), parameter, private :: i_ = (0.0_ki, 1.0_ki)
   real(ki), parameter, private :: pi = &
   & 3.1415926535897932384626433832795028841971693993751058209749445920_ki
   real(ki), parameter, private :: pi6 = pi*pi/6.0_ki

   integer, parameter :: numcs = [$ num_colors $]
   [%
   @for instructions %][%
      @select $_ match="(.).*" format="%s"
         @case "C" "T" %][%
            @select $_ match=".*(_\\d+_\\d+)" format="%s"
               @case _1_1 %]complex(ki), dimension(numcs, numcs) :: [%
                    $_ match="(.*)_\\d+_\\d+" format="%s" %]
   [%       @end @select%][%
      @end @select %][%
   @end @for instructions
   %]real(ki) :: incolors

   real(ki) :: CA, CF, KA, KF, gammaA, gammaF

   ! Basis vectors[$
   @if eval num_colors .gt. 3 $]
   integer, private :: i[$
   @end @if $][$
   @for repeat num_colors shift=1 var=cs $]
   real(ki), dimension(numcs), parameter :: c[$ cs $] = &
      & (/[$
      @with eval cs - 1 result=csm $][$
         @select csm
         @case 0 $][$
         @case 1 $]0.0_ki, [$
         @case 2 $]0.0_ki, 0.0_ki, [$
         @else $](0.0_ki, i=1,[$ csm $]), [$
         @end @select $]1.0_ki[$
      @end @with $][$
      @with eval num_colors - cs result=ncs $][$
         @select ncs
         @case 0 $][$
         @case 1 $], 0.0_ki[$
         @case 2 $], 0.0_ki, 0.0_ki[$
         @else $], (0.0_ki, i=[$ eval cs + 1$],[$ num_colors $])[$
         @end @select $][$
      @end @with $]/)[$
   @end @for repeat num_colors $] 
contains
   subroutine     init_color()
      implicit none
      real(ki) :: NA
      [% @for symbols %][%
         type.repr %] :: [% $_ match="\\$(\\d+)" format="t%s" %]
      [% @end @for %][% 
      @for instructions %]
      [% @select $_ match="(.).*" format="%s"
         @case $ %][% $_ match="\\$(\\d+)" format="t%s" %] = [%
             expression match="\\$(\\d+)" format="t%s" %][%
         @case C T %][%
             $_ match="([^_]+)_(\\d+)_(\\d+)"
             format="%1$s(%2$s, %3$s)" %] = [%
             expression match="\\$(\\d+)" format="t%s" %]
      [%     $_ match="([^_]+)_(\\d+)_(\\d+)"
             format="%1$s(%3$s, %2$s)" %] = [%
             expression match="\\$(\\d+)" format="t%s" %][%
         @else %][% $_ %] = [%
             expression match="\\$(\\d+)" format="t%s" %][%
         @end @select %][%
      @end @for instructions
      %]

      CA = NC
      CF = TR * NA / NC
      ! KA = Kg in (C.11) [Catani,Seymour]
      KA = (67.0_ki/18.0_ki - pi6) * CA &
         & - 10.0_ki/9.0_ki * TR * Nf
      ! KF = Kq in (C.11) [Catani,Seymour]
      KF = (3.5_ki - pi6) * CF
      ! gammaA = \gamma_g in (C.11) [Catani,Seymour]
      gammaA = 11.0_ki/6.0_ki * CA - 2.0_ki/3.0_ki * TR * Nf
      ! gammaF = \gamma_q in (C.11) [Catani,Seymour]
      gammaF = 1.5_ki * CF
   end subroutine init_color
   subroutine     inspect_color(unit)
      implicit none
      integer, intent(in) :: unit
      integer :: i, j
      character :: ch1, ch2, ch3

      ch3 = ","
      write (unit,'(A13)') "gosam_color=["
      do i=1,numcs
         do j=1,numcs
            if (j==1) then
               ch1 = "["
            else
               ch1 = " "
            endif

            if (j == numcs) then
               ch2 = "]"
               if (i == numcs) then
                  ch3 = "]"
               end if
            else
               ch2 = ","
            end if

            if (j == numcs) then
               write (unit,'(3x,A1,A8,G23.16,A1,G23.16,A1,A1,A1)') &
               & ch1, "complex(", real(CC(i,j)), ",", aimag(CC(i,j)), ")", &
               & ch2, ch3
            else
               write (unit,'(3x,A1,A8,G23.16,A1,G23.16,A1,A1)') &
               & ch1, "complex(", real(CC(i,j)), ",", aimag(CC(i,j)), ")", &
               & ch2
            end if
         enddo
      enddo
   end subroutine inspect_color
end module [$ process_name asprefix=\_ $]color
