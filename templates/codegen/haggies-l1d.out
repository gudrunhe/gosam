%=$[$ 
 ' vim: ts=3:sw=3:syntax=golem
$][% @with args %]module     [$ process_name asprefix=\_ 
            $]d[% DIAGRAM %]h[% HELICITY %]l1d
   ! file:      [% output.file %]
   ! generator: [% program.name %] ([% program.version %])
   use config, only: ki
   use [$ process_name asprefix=\_ $]util, only: cond, d => metric_tensor
   [$ @if internal CUSTOM_SPIN2_PROP
   $]use custompropagator[$ @end @if $]

   implicit none
   private

   complex(ki), parameter :: i_ = (0.0_ki, 1.0_ki)[%

@for instructions registers="t%d" %][%
   @select $_ match="(.).*" format="%s"
   @case E %]
   complex(ki), private :: [% $_ %][%
   @case d %]
   integer, private :: [%
         $_ match="d(\\d+)diagram" format="iv%s" %][%
   @end @select %][%
@end @for instructions %][$
@if extension qshift $][$
@else $]
   real(ki), dimension(4), private :: qshift[$
@end @if $]


   public :: derivative[$
   @if extension golem95 $], reconstruct_d[% DIAGRAM %][$
   @end @if $]
contains[% 
@for brackets bracket="brack_%d" %][%
   @for brackets bracket="subbrack_%2$d_%1$d" %]
!---#[ function [% $_ %]:
   pure function [% $_ %](Q[$
      @select r2
      @case implicit explicit $], mu2[$
      @end @select $]) result(brack)
      use model
      use [$ process_name asprefix=\_ $]kinematics
      use [$ process_name asprefix=\_ $]color
      use [$ process_name asprefix=\_ $]abbrev[%
      @with args %][$
         @select abbrev.level
         @case diagram $]d[%DIAGRAM%]h[%HELICITY%][$
         @case group $]g[%GROUP%]h[%HELICITY%][$
         @case helicity $]h[%HELICITY%][$
         @end @select $][%
      @end @with %]
      implicit none
      complex(ki), dimension(4), intent(in) :: Q[$
      @select r2
      @case implicit explicit $]
      complex(ki), intent(in) :: mu2[$
      @end @select $]
      [% type.repr %] :: brack[% 
      @for symbols registers="t%d" %]
      [%    type.repr %] :: [% $_ %][%
      @end @for %][% 
      @for instructions prefix="inst." registers="t%d" %][%
         @select inst.$_ match="(.).*" format="%s"
         @case & %]
      brack[%
         @else %]
      [% inst.$_ %][%
         @end @select
      %] = [% expression match="\\$(\\d+)" format="t%s" %][%
      @end @for instructions %]
   end  function [% $_ %]
!---#] function [% $_ %]:[%
   @end @for innerbracket %]
!---#[ function [% $_ %]:
   pure function [% $_ %](Q[$
      @select r2
      @case implicit explicit $], mu2[$
      @end @select $]) result(brack)
      use model
      use [$ process_name asprefix=\_ $]kinematics
      use SpinorBrackets
      use [$ process_name asprefix=\_ $]color
      use [$ process_name asprefix=\_ $]abbrev[%
      @with args %][$
         @select abbrev.level
         @case diagram $]d[%DIAGRAM%]h[%HELICITY%][$
         @case group $]g[%GROUP%]h[%HELICITY%][$
         @case helicity $]h[%HELICITY%][$
         @end @select $][%
      @end @with %]
      implicit none
      complex(ki), dimension(4), intent(in) :: Q[$
      @select r2
      @case implicit explicit $]
      complex(ki), intent(in) :: mu2[$
      @end @select $]
      [% type.repr %] :: brack[%
   @for symbols registers="t%d" %]
      [%    type.repr %] :: [% $_ %][%
   @end @for %][% 
   @for instructions prefix="inst." registers="t%d" %][%
      @select inst.$_ match="(.).*" format="%s"
      @case & %]
      brack[%
      @else %]
      [% inst.$_ %][%
      @end @select
      %] = [% expression bracket="brack_%2$d_%1$d(Q[$
      @select r2
      @case implicit explicit $], mu2[$
      @end @select $])" %][%
   @end @for instructions %]
   end  function [% $_ %]
!---#] function [% $_ %]:[%
@end @for outerbracket %]
   
!---#[ function derivative:
   function derivative([$
   @if internal DERIVATIVES_AT_ZERO $][$
   @else $]Q_ext, [$
   @end @if $]mu2[%
   @for instructions %][%
      @select $_ match="(.).*" format="%s"
      @case d %][%
         @select $_ match="d(\\d+)diagram" format="%s"
         @case 0 %][%
         @else %], [% $_ match="d(\\d+)diagram" format="i%s" %][%
         @end @select %][%
      @end @select %][%
   @end @for %]) result(numerator)
      use [$ process_name asprefix=\_ $]globalsl1, only: epspow
      use [$ process_name asprefix=\_ $]kinematics
      use [$ process_name asprefix=\_ $]abbrev[%
      @with args %][$
         @select abbrev.level
         @case diagram $]d[%DIAGRAM%]h[%HELICITY%][$
         @case group $]g[%GROUP%]h[%HELICITY%][$
         @case helicity $]h[%HELICITY%][$
         @end @select $][%
      @end @with %]
      implicit none[$
      @if internal DERIVATIVES_AT_ZERO $][$
      @else $]
      complex(ki), dimension(4), intent(in) :: Q_ext[$
      @end @if $]
      complex(ki), intent(in) :: mu2[%
      @for instructions %][%
         @select $_ match="(.).*" format="%s"
         @case d %][%
            @select $_ match="d(\\d+)diagram" format="%s"
            @case 0 %][%
            @else %]
      integer, intent(in), optional :: [%
         $_ match="d(\\d+)diagram" format="i%s" %][%
            @end @select %][%
         @end @select %][%
      @end @for %]
      complex(ki) :: numerator
      complex(ki) :: loc[%
      @for symbols registers="t%d" %]
      [%    type.repr %] :: [% $_ %][%
      @end @for %]
      integer :: deg[$
      @if internal DERIVATIVES_AT_ZERO $]
      complex(ki), dimension(4), parameter :: Q = (/&
        &(0.0_ki,0.0_ki),(0.0_ki,0.0_ki),(0.0_ki,0.0_ki),(0.0_ki,0.0_ki)/)[$
      @else $]
      ! The Q that goes into the diagram
      complex(ki), dimension(4) :: Q[$
      @end @if $][%
   @with args %][$
      @if extension qshift $][$
      @else $][%
         @select QSHIFT
         @case 0 %]
      qshift(:) = 0.0_ki[%
         @else %]
      qshift = [% QSHIFT %][%
         @end @select %][$
      @end @if $][%
   @end @with %][$
      @if internal DERIVATIVES_AT_ZERO $][$
      @else $][%
   @with args %][$
      @if extension qshift $]

      Q(:) = Q_ext(:)[$
      @else $][%
         @select QSHIFT
         @case 0 %]
      Q(:) = [% QSIGN %]Q_ext(:)[%
         @else %]
      Q(:)   = [% QSIGN %]Q_ext(:) - qshift(:)[%
         @end @select %][$
      @end @if $][%
   @end @with %][$
      @end @if DERIVATIVES_AT_ZERO $]
      numerator = 0.0_ki
      deg = 0[%
      @for instructions %][%
         @select $_ match="(.).*" format="%s"
         @case d %][%
            @select $_ match="d(\\d+)diagram" format="%s"
            @case 0 %][%
            @else %]
      if(present([% $_ match="d(\\d+)diagram" format="i%s" %])) then
         [% $_ match="d(\\d+)diagram" format="iv%s" %] = [%
            $_ match="d(\\d+)diagram" format="i%s" %]
         deg = [% $_ match="d(\\d+)diagram" format="%s" %]
      else
         [% $_ match="d(\\d+)diagram" format="iv%s" %] = 1
      end if[%
            @end @select %][%
         @end @select %][%
      @end @for %][%
   @for instructions registers="t%d" %][%
      @select $_ match="(.).*" format="%s"
      @case d %]
      if(deg.eq.[% $_ match="d(\\d+)diagram" format="%s" %]) then
         numerator = [% expression bracket="brack_%d[$
         @select r2
         @case only off $](Q)[$
         @end @select $]" %]
         return
      end if[%
      @else %]
      [% $_ %] = [% expression bracket="brack_%d[$
         @select r2
         @case only off $](Q)[$
         @end @select $]" %][%
      @end @select %][%
   @end @for instructions %]
   end function derivative
!---#] function derivative:[$
@if extension golem95 $]
!---#[ subroutine reconstruct_d[% DIAGRAM %]:
   subroutine     reconstruct_d[% DIAGRAM %](coeffs)
      use [$ process_name asprefix=\_ $]groups, only: tensrec_info_group[% 
             GROUP %]
      implicit none
      complex(ki), parameter :: czip = (0.0_ki, 0.0_ki)
      complex(ki), parameter :: cone = (1.0_ki, 0.0_ki)
      complex(ki), parameter :: ctwo = (2.0_ki, 0.0_ki)

      type(tensrec_info_group[% GROUP %]), intent(out) :: coeffs[$
   @select r2 @case implicit $][%
     @select LOOPSIZE @case 0 1 2 3 4 %][%
      @select RANK @case 0 1 2 3 %][%
      @else %]
      complex(ki) :: x1, x2[%
      @end @select %][%
    @case 5 %][%
      @select RANK @case 0 1 2 3 4 5%][%
      @else %]
      complex(ki) :: x1, x2, x3[%
      @end @select %][%
     @end @select %][$
   @end @select $][$
   @if internal DERIVATIVES_AT_ZERO $][$
   @else $]
      complex(ki), dimension(4), parameter :: Q = (/czip,czip,czip,czip/)[$
   @end @if $][[$ ' $]%

   @select RANK[$
   @for repeat max_rank inclusive=true var=rk $]
   @case [$ rk $] %[$ ' $]]
      ! rank [$ rk $] case:
      !---[# reconstruct coeffs%coeffs_[% DIAGRAM %]:[$
      @for tens_rec_info rk shift_args=1 $]
      coeffs%coeffs_[% DIAGRAM %][$
         @if eval rk .gt. 0 $]%c[$ coeff $][$
            @select coeff @case 0 $][$
            @else $]([$k$],[$i$])[$
            @end @select $][$
         @end @if $] = [$
         @select sign @case -1 $]-[$
         @end @select $]derivative([$

         @if internal DERIVATIVES_AT_ZERO $][$
         @else $]Q,[$
         @end @if $]czip[$
         @for elements args delim=, $],[$ $_ $][$
         @end @for $])[$
         @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
         @end @if $][$
      @end @for tens_rec_info rk $]
      !---#] reconstruct coeffs%coeffs_[% DIAGRAM %]:[$



      @select r2 @case implicit $][%
        @select LOOPSIZE @case 0 1 2 3 4 5 %][%
         @select LOOPSIZE @case 0 1 2 3 4 %][$
         @select rk @case 0 1 $][$
         @case 2 3 $]
      !---#[ reconstruct coeffs%coeffs_[% DIAGRAM %]s1:[$
            @with eval rk - 2 result=rkk $][$
               @for tens_rec_info rkk shift_args=1 $]
      coeffs%coeffs_[% DIAGRAM %]s1[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$

                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $]cone[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $][$
               @end @for tens_rec_info rkk $][$
            @end @with eval rkk $]
      !---#] reconstruct coeffs%coeffs_[% DIAGRAM %]s1:[$
         @else $]
      !---#[ reconstruct coeffs%coeffs_[% DIAGRAM %]s1 and s2:[$
            @with eval rk - 2 result=rkk $][$
               @for tens_rec_info rkk shift_args=1 $]
      x1 = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$
                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $] cone[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $]
      x2 = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$
                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $]-cone[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $]
      coeffs%coeffs_[% DIAGRAM %]s1[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = 0.5_ki * (x1 - x2)
      coeffs%coeffs_[% DIAGRAM %]s2[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = 0.5_ki * (x1 + x2)[$
               @end @for tens_rec_info $][$
            @end @with eval rkk $]
      !---#] reconstruct coeffs%coeffs_[% DIAGRAM %]s1 and s2:[$
         @end @select rk $][%
        @else %][$
        @select rk @case 0 1 2 3 4 5 $][$ @else $]
      !---#[ reconstruct coeffs%coeffs_[% DIAGRAM %]s1 and s2 and s3:[$
            @with eval rk - 2 result=rkk $][$
               @for tens_rec_info rkk shift_args=1 $]
      x1 = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$
                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $] cone[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $]
      x2 = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$
                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $]-cone[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $]
      x3 = [$
                  @select sign @case -1 $]-[$
                  @end @select $]derivative([$
                  @if internal DERIVATIVES_AT_ZERO $][$
                  @else $]Q,[$
                  @end @if $]ctwo[$

                  @for elements args delim=, $],[$ $_ $][$
                  @end @for $])[$

                  @if eval symmetry .gt. 1 $] / [$ symmetry $].0_ki[$
                  @end @if $] - coeffs%coeffs_[% DIAGRAM %]%c[$ coeff $][$
                  @select coeff @case 0 $][$
                  @else $]([$kmap$],[$imap$])[$
                  @end @select $]
      coeffs%coeffs_[% DIAGRAM %]s1[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = x1 - x2/3._ki - x3/6._ki
      coeffs%coeffs_[% DIAGRAM %]s2[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = 0.5_ki * (x1 + x2)
      coeffs%coeffs_[% DIAGRAM %]s3[$
                  @if eval rkk .gt. 0 $]%c[$ coeff $][$
                     @select coeff @case 0 $][$
                     @else $]([$k$],[$i$])[$
                     @end @select $][$
                  @end @if $] = (x3 - x2)/6._ki - 0.5_ki * x1[$
               @end @for tens_rec_info $][$
            @end @with eval rkk $]
      !---#] reconstruct coeffs%coeffs_[% DIAGRAM %]s1 and s2 and s3:[$
        @end @select rk $][%
        @end @select %][%
        @end @select %][$
      @end @select r2 $][[$ ' $]%[$
   @end @for repeat max_rank $]
   @end @select %[$ ' $]]
   end subroutine reconstruct_d[% DIAGRAM %]
!---#] subroutine reconstruct_d[% DIAGRAM %]:[$
@end @if $]
end module [$ process_name asprefix=\_
          $]d[%DIAGRAM%]h[%HELICITY%]l1d[%
@end @with %]
